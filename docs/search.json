[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS2023 Final_Project",
    "section": "",
    "text": "1 Report",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Final Report</span>"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "DS2023 Final_Project",
    "section": "1.1 Prepared for",
    "text": "1.1 Prepared for\nThis report is intended to be shown primarily to patients , to allow patients themselves to see how well or how far off they are in terms of the level of recovery, and whether further special types of treatments are needed or whether they should worry about their speed of recovery.\nThis report could also be prepared for physical therapists, sports medicine professionals, and surgical recovery specialists who support young athletes undergoing ACLR (Anterior Cruciate Ligament Reconstruction) recovery. Medical professionals could also base their decisions off this report as a reference.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Final Report</span>"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "DS2023 Final_Project",
    "section": "1.2 Problem Statement",
    "text": "1.2 Problem Statement\nPhysicians need an efficient way to compare their patient’s progress with similar patients. What we started as a question was whether we could visualize patient data in a way that immediately provides a comparison of the individual patient to their peer group?\nMany athletes, especially young ones, undergo ACLR (Anterior Cruciate Ligament Reconstruction) surgery, which has a high possibility of having negative ripple effects on their athletic future and overall well-being. While there are many ways to analyze post-surgical recovery for long-term improvements, it is equally important to focus on the needs of the individual currently recovering.\nFrequently, patients do not fully understand the path their recovery will take, which can lead to confusion or discouragement. It is therefore critical that physical therapists and clinicians have tools to illustrate where patients stand relative to their recovery benchmarks in real time. This context can improve trust, motivation, and adherence to rehabilitation.\nEven before surgery, it is essential to help patients set realistic expectations. For example, the first few months post-surgery may feel worse than their pre-surgery state. However, patients should be reassured that this is typical, and that on average, perceived quality of life tends to improve steadily thereafter.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Final Report</span>"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "DS2023 Final_Project",
    "section": "1.3 Analysis",
    "text": "1.3 Analysis\nPost-surgery recovery is crucial, no matter the procedure(s) that the patient undergoes. With the majority of patients being athletes, knee strength and ability holds even more importance to a return to their pre-surgery pace of life.\nACLR surgery requires intensive physical therapy. It would be pretty unusual for someone with any sort of previous surgery to not have any pain related to the procedure ever again. Yet for many young patients this is the first surgery that they are ever undergoing and they are woefully underprepared in what the recovery will look like.\n This visualization helps clarify how KOOS Pain Scores typically change over time. Patient 101’s trajectory is highlighted to contextualize how their recovery compares to the cohort’s mean. It is shown that Patient 101’s current pain trajectory is well above the average pain trajectory, suggesting that the patient is experiencing a normal/regular level of pain that is common across all patients, and that patient 101 is on a healthy trajectory in terms of pain registration.\nIn the process of recovering, the patient might start feeling as though they are not actually recovering or like they are falling behind benchmarks.\n The radar chart illustrates Patient 101’s self-reported metrics (like pain, symptoms, ADL, QoL) against cohort averages at both 5–7 and 8–12 month check-ins. It turns out that Patient 101 reported a worsening in the symptom’s effect at the second visit, which is also visibly worse than the cohort’s average in terms of symptom effects at the time of 8 to 12 months. Nevertheless, the patient does experience an increase in Quality of Life at the second visit, siginficantly outperforming their cohort averages. While trade-off between symptom effects and quality of life is quite counterintuitive, we could also see that metrics such as intense athletic movements also slightly improved at the second visit, potentially indicating how patient 101 values the ability to perform intense athletic movements more than experiencing worse symptom effects.\nPatients should be given comparisons with surgical peer groups in visualizations and explanations where they can easily see if they are staying on track in their recovery. This ‘on track’ benchmark would be determined by the average recovery statistics of peer groups in order to illustrate the full depth of recovery.\n This boxplot comparison provides a snapshot of how Patient 101 performs in objective medical tests and patient-reported outcomes, offering a tangible way to visualize if they’re on track. Observing all box plots, it is shown that at a second visit yielded a positive recovery outcome for almost all metrics. While some metrics didn’t reach the cohort’s median, it did reached within the inter-quartile range of the cohort’s recovery outcome, suggesting that patient 101 is on a healthy recovery trajectory, at least according to the two visits recorded. Moreover, Patient 101 is almost exceeding cohort median recovery metrics at all self reported outcomes, this correlates back to the radar graph, which showcased how Patient 101 excelled almost every KOOS self-reported recovery metrics against cohort averages. Hence overall suggesting that, although Patient 101 is on a modest healthy recovery trajectory, they are feeling much better than the rest of the cohort at Patient 101’s stage of recovery.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Final Report</span>"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "DS2023 Final_Project",
    "section": "1.4 Conclusion",
    "text": "1.4 Conclusion\nIn the end, it is crucial post-surgery that the patient and their medical team have a straightforward way of tracking the patient’s progress.\nGiven the lasting nature of various quality of life and athletic ability related deteriorations, transparency on typical progression post-surgery is much needed.\nThe patient must have ways of seeing their recovery rate in a manner that illustrates if there is anything concerning about the pace of their recovery.\nWhile explanations by physical therapists and surgeons are much needed, it is also crucial that the patient is able to see and comprehend their recovery themselves in order to ensure that the patient does not feel like they are flying blind in recovery.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Final Report</span>"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "2  Data Cleaning",
    "section": "",
    "text": "2.1 Data Cleaning - Removing unnecessary columns, renaming variables, identifying missing values, imputing missing values",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#data-cleaning---removing-unnecessary-columns-renaming-variables-identifying-missing-values-imputing-missing-values",
    "href": "datacleaning.html#data-cleaning---removing-unnecessary-columns-renaming-variables-identifying-missing-values-imputing-missing-values",
    "title": "2  Data Cleaning",
    "section": "",
    "text": "2.1.1 Removing unnecessary columns (columns with zero data)\ndf.columns[df.isnull().all()]# these are columns that have no data ( we need to drop)\n\ndf.drop(columns=['redcap_repeat_instrument', 'tss_tegner'], inplace=True)\n\ntotal_rows = len(df)\nmissing_summary = pd.DataFrame({\"Column Name\": df.columns,\"Non-Null Count\": df.notnull().sum().values,\"% Missing\": df.isnull().mean().values * 100})\n\nmissing_summary = missing_summary.sort_values(by=\"% Missing\", ascending=False)\n\nmissing_summary\n\n\n\nColumn Name\nNon-Null Count\n% Missing\n\n\n\n\nrecord_id\n11150\n0.00%\n\n\nredcap_event_name\n11150\n0.00%\n\n\nsex_dashboard\n4737\n57.52%\n\n\ngraft_dashboard2\n4737\n57.52%\n\n\nmed_meniscus\n4121\n63.04%\n\n\nlat_meniscus\n4121\n63.04%\n\n\nlat_stab\n3662\n67.16%\n\n\nphysis\n936\n91.61%\n\n\nvisit_sex\n5234\n53.06%\n\n\nvisit_graft\n5234\n53.06%\n\n\nage\n5126\n54.02%\n\n\nage_group\n5126\n54.02%\n\n\nage_group_dashboard\n4724\n57.62%\n\n\nage_group_dashboard_use\n5237\n53.02%\n\n\nheight_m\n2518\n77.41%\n\n\nmass_kg\n3251\n70.84%\n\n\nbmi\n2517\n77.42%\n\n\ntss\n5125\n54.04%\n\n\ntss_dashboard\n5237\n53.02%\n\n\nreinjury\n5175\n53.58%\n\n\nikdc\n2951\n73.53%\n\n\npedi_ikdc\n1647\n85.23%\n\n\nmarx\n911\n91.83%\n\n\npedi_fabs\n37\n99.67%\n\n\nkoos_version\n2637\n76.35%\n\n\nkoos_pain\n2767\n75.17%\n\n\nkoos_sx\n2769\n75.15%\n\n\nkoos_adl\n2769\n75.15%\n\n\nkoos_sport\n2768\n75.16%\n\n\nkoos_qol\n2775\n75.10%\n\n\n\nLooking for missing values in the rest of the columns\ndf.isnull().sum() # looking for missing data\n\n\n\nColumn Name\nMissing Values\n\n\n\n\nrecord_id\n0\n\n\nredcap_event_name\n0\n\n\nsex_dashboard\n6413\n\n\ngraft_dashboard2\n6413\n\n\nmed_meniscus\n7029\n\n\n…\n…\n\n\ncon_flex_isok_60\n9402\n\n\nlsi_flex_isok_60\n8928\n\n\nstrength_testing_complete\n5913\n\n\nrts\n10464\n\n\nrts_tss\n10479\n\n\n\nFinding the top few columns that have the least percentage of missing values, this shows that there exists a huge volume of missing values in the dataset and that imputation is very necessary in order to make any meaningful insight out of this dataset\nmissing_percent = df.isnull().sum() / len(df) * 100\nprint(missing_percent.nsmallest(10))\n\n\n\nColumn Name\n% Missing Values\n\n\n\n\nrecord_id\n0.000000\n\n\nredcap_event_name\n0.000000\n\n\nage_group_dashboard_use\n53.031390\n\n\ntss_dashboard\n53.031390\n\n\nstrength_testing_complete\n53.031390\n\n\nvisit_sex\n53.058296\n\n\nvisit_graft\n53.058296\n\n\nreinjury\n53.587444\n\n\nage\n54.026906\n\n\nage_group\n54.026906\n\n\n\n\n\n2.1.2 Seeing values to make the nan as Not reported\nBefore carrying out imputation for the missing values, replace all ‘NaN’ entries in the various demographic variables as Not reported for consistency\nprint(df[\"sex_dashboard\"].unique())\nprint(df['visit_sex'].unique())\nprint(df['age_group_dashboard_use'].unique())\nprint(df['graft_dashboard2'].unique())\nprint(df['visit_graft'].unique())\n[‘Male’ nan ‘Female’ ‘Not Reported’] [nan ‘Male’ ‘Female’ ‘Not Reported’] [nan ‘21 to 25 years’ ‘12 to 14 years’ ‘15 to 17 years’ ‘18 to 20 years’ ‘26 to 34 years’ ‘Not Reported’] [‘Other’ nan ‘HS autograft’ ‘BTB autograft’ ‘Allograft’ ‘QT autograft’] [nan ‘Other’ ‘HS autograft’ ‘BTB autograft’ ‘Allograft’ ‘QT autograft’]\nprint(df['redcap_event_name'].unique())\n[‘baseline_arm_1’ ‘visit_1_arm_1’ ‘long_term_outcomes_arm_1’ ‘visit_2_arm_1’ ‘visit_3_arm_1’ ‘visit_4_arm_1’ ‘visit_5_arm_1’ ‘visit_6_arm_1’ ‘data_upload_arm_2’ ‘visit_7_arm_1’ ‘visit_8_arm_1’ ‘visit_9_arm_1’]\nprint(df['strength_testing_complete'].unique())\n[nan 2. 0.]\nprint(df['med_meniscus'].unique())\nprint(df['lat_meniscus'].unique())\n[nan 1. 3. 2.] [nan 3. 1. 2.]\nGender, Age Groups, ( make the nan as Not reported) ( input)\ndf['age_group_dashboard_use'] = df['age_group_dashboard_use'].fillna('Not Reported')\ndf['sex_dashboard'] = df['sex_dashboard'].fillna('Not Reported')\ndf['visit_sex'] = df['visit_sex'].fillna('Not Reported')\nVisualizing and observing the presence of missing values across all columns and taking a look at what columns are useful, and what columns are meaningless\n# I've also included a visual aid of how many missing values we have for each variable\n# Bar plot of missing values for each column\nmissing_vals = df.isnull().sum()\nmissing_vals = missing_vals[missing_vals &gt; 0] # making sure to inlcude only the missing values ( no variables with complete)\nmissing_vals.sort_values(inplace=True)\n\nplt.figure(figsize=(14, 10))\nmissing_vals.plot(kind='barh', color='lightcoral') # making this horizontal bargraph to enhance readability\nplt.title('Missing Values Visualized', fontsize=20)# let's make sure the title is big\nplt.xlabel('# of Missing Values ', fontsize=10)\nplt.ylabel('Columns', fontsize=10)\nplt.xticks(fontsize=8)\nplt.yticks(fontsize=8)\nplt.gca().invert_yaxis() # we need this code to ensure that we have the missing values inverted\nplt.savefig('missing_values.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\nmissing values\n\n\nure(figsize=(12, 12))\nsns.boxplot(data=df, orient=\"h\")\nplt.title(\"Outlier present\")\nplt.savefig('outliers.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\noutliers\n\n\nExploratory phase: to impute data more effectively, we chose to split the imputation process by categorical and numerical variables. We chose to impute the categorical variables via the frequency of a cateogory’s presence in the dataset, and impute the numerical variables via the mean of the column’s numerical values.\n# Let's split the categorical and numerical columns\ncategorical_columns = df.select_dtypes(include=['object']).columns # this includes strings\nnumerical_columns = df.select_dtypes(include=['float64', 'int64']).columns # these are numbers with meaning\n\n# Now let's impute categorical(mode) and numerical columns (median)\ndf[categorical_columns] = df[categorical_columns].fillna(df[categorical_columns].mode().iloc[0])\ndf[numerical_columns] = df[numerical_columns].fillna(df[numerical_columns].median())\n\ndf.isnull().sum()\n\n\n\nColumn Name\nMissing Values\n\n\n\n\nrecord_id\n0\n\n\nredcap_event_name\n0\n\n\nsex_dashboard\n0\n\n\ngraft_dashboard2\n0\n\n\nmed_meniscus\n0\n\n\n…\n…\n\n\ncon_flex_isok_60\n0\n\n\nlsi_flex_isok_60\n0\n\n\nstrength_testing_complete\n0\n\n\nrts\n0\n\n\nrts_tss\n0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "3  Exploratory Data Analysis",
    "section": "",
    "text": "3.1 Plan outlook:\nOur previous plan is to create a dynamic dashboard, but given that dynamic dashboards are not allowed in this assignment, we chose to create graphs that identifies a hypothetical patient (randomly selected patient from the dataset) in our hypothetical clinic, and is currently being treated by a hypothetical doctor in the midst of a recovery stage. The purpose of the visualizations would then to be to compare the current patient’s recovery status to the rest of the cohort’s averages or median values (at the current stage of recovery, 5 - 7 months, 8 - 12 months), by doing so, doctors could be informed as to how well the patient is recovering, and patients themselves could also get a grasp at whether they are on track when compared to a cohort wide regular recovery trajectory.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#example-scenario",
    "href": "eda.html#example-scenario",
    "title": "3  Exploratory Data Analysis",
    "section": "3.2 Example Scenario:",
    "text": "3.2 Example Scenario:\nIf a doctor conducted a self-reported evaluation survey with their patient (i.e. KOOS), or any other form of strength evaluation based off a certain testing methodology. The doctor could then compare that particular patient’s survey results or evaluation score with the average/median values of the rest of the cohort’s performances (or regular recovery trends of all patients recorded in the database) to determine whether the patient is on track, falling behind, or suffering from unique conditions that does not fit normal observed recovery outcomes.\nThe patient could equally conduct such evaluative reflection by themselves.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#exploratory-data-analysis",
    "href": "eda.html#exploratory-data-analysis",
    "title": "3  Exploratory Data Analysis",
    "section": "3.3 Exploratory Data Analysis",
    "text": "3.3 Exploratory Data Analysis\nVisualizing the distribution of graft types by age groups: are graft types a significant factor / choice among a certain age group?\n# distribtion of grafttype by age groups\n\nplt.figure(figsize=(12, 6))\nsns.countplot(data=df, x='graft_dashboard2', hue='age_group_dashboard_use')\nplt.title(\"Distribution by Age Group\")\nplt.show()\n\n\n\ngaft type distribution\n\n\nVisualizing the distribution of age groups by sex category: this graph tells us that that the age group of 15-17 years old showcases a little disparity while all other age groups contain a similar number of male and female patients. An initial conclusion could be made that girls are likely to be injured from the age of 15 to 17 years old.\n# distrubtion of grafttype by sex\nplt.figure(figsize=(12, 6))\nsns.countplot(data=df, x='age_group_dashboard_use', hue='visit_sex')\nplt.title(\"Distribution of Age by Sex\")\nplt.savefig('gafttype_sex.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\ngraft type distribution by sex\n\n\nAlong the way, we discovered that tss stands for ‘time since surgery’ a relatively useful variable for us since we are aiming to visualize the change in recovery rates or other variables over time.\nprint(df['tss_dashboard'].unique()) # time since surgery\n[‘5 to 7 months’ ‘13 to 24 months’ ‘8 to 12 months’ ‘3 to 4 months’ ‘Not Reported’ ‘Preoperative’]\nVisualizing how the self-reported pain evaluation score is distributed by the variable of time since surgery. If the KOOS pain score is distributed from 0 to 100, with 100 representing maximum ‘pain level’, we could conclude that most people felt maximum painfulness at the 8th to 12th month since surgery. This proves that that tss, combined with any other recovery metrics, could deduce valuable and interesting insights for not just us, but also our ‘stakeholders’ - the doctors/physicians when observing the recovery of their patients.\nplt.figure(figsize=(12, 6))\nsns.histplot(data=df, x='koos_pain', hue='tss_dashboard', multiple='stack')  # or 'dodge'\nplt.title(\"Distribution of KOOS Pain Scores by Time Since Surgery\")\nplt.xlabel(\"KOOS Pain Score\")\nplt.ylabel(\"Count\")\nplt.legend(df['tss_dashboard'])\nplt.savefig('koos_pain_score_bytss.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\nDistribution of Pain scores by tss\n\n\nWith this in mind, we’ve decided to visualize tss against all of the other recovery metric variables (whether it is pain, LSI, strength score, etc) to see how patients recover over time. We adopted a small multiples strategy so that all of the visualizations can be created at once\n# visualizing the distirbution of strength testing, tss ( multiple)\n\nfig,axs = plt.subplots(3,3, figsize=(20, 15))\n\nsns.histplot(data=df, x='acl_sh', hue= 'tss_dashboard', multiple='stack', ax=axs[0,0], legend=False)\naxs[0,0].set_title(\"ACL Strength\")\n\nsns.histplot(data=df, x='acl_th', hue= 'tss_dashboard', multiple='stack', ax=axs[0,1], legend=False)\n\nsns.histplot(data=df, x='acl_ch', hue= 'tss_dashboard', multiple='stack', ax=axs[0,2], legend=False)\n\nsns.histplot(data=df, x='acl_ext_mvic_90', hue= 'tss_dashboard', multiple='stack', ax=axs[1,0], legend=False)\n\nsns.histplot(data=df, x='acl_ext_mvic_60', hue= 'tss_dashboard', multiple='stack', ax=axs[1,1], legend=False)\n\nsns.histplot(data=df, x='acl_flex_mvic_60', hue= 'tss_dashboard', multiple='stack', ax=axs[1,2], legend=False)\n\nsns.histplot(data=df, x='acl_ext_isok_60', hue= 'tss_dashboard', multiple='stack', ax=axs[2,0], legend=False)\n\nsns.histplot(data=df, x='acl_flex_isok_60', hue= 'tss_dashboard', multiple='stack', ax=axs[2,1])\nplt.savefig('recovery_metrics_by_tss.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\nsmall multiples of acl strength distributions\n\n\nFrom the small multiples above, we could see how the recovery metrics are distributed by comparing the different ‘types’ of recovery metrics in the same ‘category’. I.e. observing how acl knee extension value differentiates in the different degrees of which the patient can extend their knee to.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "4  Data Visualization",
    "section": "",
    "text": "5 Data Visualization\nThis section documents the code used to generate the three visualizations in the final report:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#koos-pain-recovery-trajectory",
    "href": "dataviz.html#koos-pain-recovery-trajectory",
    "title": "4  Data Visualization",
    "section": "5.1 KOOS Pain Recovery Trajectory",
    "text": "5.1 KOOS Pain Recovery Trajectory\n#Importing Necessary Packages\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random # this is used to select random patients to sample/project on our visualization since we are limiting the number of paitents (lines), being shown on the page.\n\n#SETTING THE SEED- for reproducibility\nrandom.seed(42)\n\n# Let's Remove \"Preoperative\" stage ( only has a few lines so it's not worth out puting)\ndf_filtered = df[df['tss_dashboard'] != 'Preoperative']\n\n# Map timepoints (we do this because the default was unordered and didn't have a logical flow)\ntss_mapping = {\n    \"3 to 4 months\": 0,\n    \"5 to 7 months\": 1,\n    \"8 to 12 months\": 2,\n    \"13 to 24 months\": 3,\n}\n\ndf_filtered['time_ordered'] = df_filtered['tss_dashboard'].map(tss_mapping)\n# Setting the x-axis labels in correct order\nlabels = [t for t, a in sorted(tss_mapping.items(), key=lambda x: x[1])]\n\n# Keeping patients with at least 3 timepoints, includeing  patient 101 ( which is our selected patient of focus)\n#Consulted with CHATGTP for a little help refining and structreing this part\n\n# What this does is it looks through the record_id and selects the rows that have the same record_id show up atleast 3 times\nv = df_filtered['record_id'].value_counts()[lambda x: x &gt;= 3].index\nv = v.union([101]) #  Used documentation on how to structure this and use the union function\ndf_3 = df_filtered[df_filtered['record_id'].isin(v)]\n\n# Let's choose  up to 200 others  patients ( we are doing this so we can compare patient 101 and see relative paths it could take)\nother_ids = [i for i in df_3['record_id'].unique() if i != 101] # this filters record_ids ( that show up at 3 different timepoints) excluding patient 101 ( record_id)\nsampled_ids = random.sample(other_ids, min(200, len(other_ids))) # this samples 200 random record_ids pateints\nsampled_ids.append(101)#(this adds the record_id 101 ( our target pateint))\n\n# this is full dataframe where it includes both the 200 sampled record_ids and our target paitent 101\ndf_sampled = df_3[df_3['record_id'].isin(sampled_ids)]\n\n\n\n# MAKING THE GRAPH (PLOTTING)\nplt.figure(figsize=(14, 7))\n\n\n#Plotting other patient lines (for comparison)- conditional for making all other sample record_ids grey\nfor p, group in df_sampled.groupby('record_id'):\n    if p != 101:\n        plt.plot(group['time_ordered'], group['koos_pain'], color='gray', alpha=0.2, linewidth=1)\n\n#Mean trajectory of other patients ( this may be useful to see how our paitent 101 is doing comparing to others ( in that sample))\nmean_traj = df_sampled[df_sampled['record_id'] != 101].groupby('time_ordered')['koos_pain'].mean()\nplt.plot(mean_traj.index, mean_traj.values, color='blue', linestyle='--', linewidth=2, label='Mean Trajectory') # blue is a good choice\n\n# Recovery phases- for visual aiding\nplt.axvspan(0, 1, color='gold', alpha=0.1, label='Early Recovery Stage')\nplt.axvspan(1, 2, color='orange', alpha=0.1, label='Mid Recovery Stage')\nplt.axvspan(2, 3, color='green', alpha=0.1, label='Late Recovery Stage')\n\n# Let's Highlight Patient 101\nben = df_sampled[df_sampled['record_id'] == 101].sort_values('time_ordered') #this makes a new column that has information on our benchmark patient\nplt.plot(ben['time_ordered'], ben['koos_pain'], color='orange', linewidth=2.5) # red to show importance\n# Annotate each point on Patient 101's line with the KOOS Pain score value\nfor x, y in zip(ben['time_ordered'], ben['koos_pain']):\n    plt.text(x, y + 1, f'{y:.1f}', color='orange', fontsize=9, ha='left')\n\n\n# styling\nplt.xticks(ticks=range(len(labels)), labels=labels)\nplt.xlabel('Time Since Surgery',fontsize=12)\nplt.ylabel('KOOS Pain Score', fontsize=12)\nplt.text(-0.2, 105, 'Post-ACLR KOOS Pain Scores: Where Does',fontsize=20, fontweight='bold', ha='left')\nplt.text(1.613, 105, 'Patient 101', fontsize=20, fontweight='bold', ha='left', color='#FF6E00')\nplt.text(2.12, 105, 'Fit in the Recovery Spectrum?', fontsize=20, fontweight='bold', ha='left')\nplt.grid(False)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['left'].set_position(('outward', -30))\nplt.tick_params(axis='x', which='both', length=0, pad= 15)\nplt.figtext(0.01, -0.05, 'Note: KOOS Pain scores range from 0 (extreme pain) to 100 (no pain). Data includes randomly sampled patients with at least 3 observations.', fontsize=10, ha='left')\nplt.figtext(0.01, -0.08, \"Note: Multiple observations may exist within a time bin\")\nplt.figtext(0.01, -0.16,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\nplt.legend(loc='lower right', bbox_to_anchor=(0.9, 0.1), facecolor=\"white\")\nplt.tight_layout()\nplt.savefig('KOOS_Pain_Recovery_Trajectory.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\nSpaghetti Graph - KOOS Pain Trajectory",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#radar-small-multiples-graph-of-koos-self-reported-metrics",
    "href": "dataviz.html#radar-small-multiples-graph-of-koos-self-reported-metrics",
    "title": "4  Data Visualization",
    "section": "5.2 Radar small multiples Graph of KOOS Self-reported metrics",
    "text": "5.2 Radar small multiples Graph of KOOS Self-reported metrics\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# aggregate together the evaluative metrics as well as the visit sessions\nkoos_metrics = ['koos_pain', 'koos_sx', 'koos_adl', 'koos_sport', 'koos_qol']\nvisits = ['5 to 7 months', '8 to 12 months']  # only the two ranges we care about\n\n# calculating the visit-wise averages of each metric\nkoos_avg = df.groupby('tss_dashboard')[koos_metrics].mean().loc[visits]\n\n# calculating patient 101 and average duplicates\npatient_df = (\n    df[df['record_id'] == 101]\n      .groupby('tss_dashboard')[koos_metrics]\n      .mean()\n      .reindex(visits)\n)\n\n# ensuring that each small-multiple panels share the same scale\nmin_value = min(koos_avg.min().min(), patient_df.min().min())\nmax_value = max(koos_avg.max().max(), patient_df.max().max())\nmargin_value = (max_value - min_value) * 0.1\n\n# angles for the five KOOS spokes\nN = len(koos_metrics)\nangles = np.linspace(0, 2*np.pi, N, endpoint=False).tolist()\nangles += angles[:1]\n\n# set up the side-by-side polar subplots\nfig, axes = plt.subplots(nrows=1, ncols=len(visits), subplot_kw=dict(polar=True), figsize=(12, 8))\nif len(visits) == 1:\n    axes = [axes]\n\navg_colors = ['#777777', '#777777']\npatient_colors = ['#FF6E00', '#FF6E00']\n\n# loop through each visit stage and dedicated axis\nfor idx in range(len(visits)):\n    stage = visits[idx]\n    ax = axes[idx]\n    ax.set_facecolor('white')\n    ax.set_ylim([min_value - margin_value, max_value + margin_value])\n\n    avg_vals = koos_avg.loc[stage].tolist()\n    avg_vals.append(avg_vals[0])\n    ax.plot(angles, avg_vals, label='Cohort average', color=avg_colors[idx], linewidth=2)\n    ax.fill(angles, avg_vals, color=avg_colors[idx], alpha=0.08)\n\n    if not patient_df.loc[stage].isna().all():\n        pat_vals = patient_df.loc[stage].tolist()\n        pat_vals.append(pat_vals[0])\n        ax.plot(angles, pat_vals, label='Patient 101', color=patient_colors[idx], linewidth=2.5)\n        ax.fill(angles, pat_vals, color=patient_colors[idx], alpha=0.25)\n\n    labels = ['Pain Intensity', 'Symptoms', 'Activities of\\nDaily Living', 'Intense\\nAthletic\\nMovements', 'Quality of Life (By Knee)']\n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels(['']*N)\n    radial_push = [3, 4, 6, 6, 5]\n    for ang, txt, extra in zip(angles[:-1], labels, radial_push):\n        r = max_value + margin_value + extra\n        ha = 'left' if (0 &lt;= ang &lt;= np.pi/2 or 3*np.pi/2 &lt;= ang &lt;= 2*np.pi) else 'right'\n        ax.text(ang, r, txt, ha=ha, va='center', fontsize=10, color='#333333')\n\n    ax.tick_params(colors='#666666')\n    ax.yaxis.grid(True, color='#DDDDDD', linewidth=0.8)\n    ax.xaxis.grid(False)\n    ticks = np.linspace(min_value, max_value, 6)\n    ax.set_yticks(ticks)\n    ax.set_yticklabels([f\"{x:.0f}\" for x in ticks], fontsize=8)\n    ax.set_title(stage, y=1.08, fontweight='bold', fontsize=13)\n\n# drawing the arrows\nmetric_name = 'koos_qol'\nmetric_idx = koos_metrics.index(metric_name)\nmetric_ang = angles[metric_idx]\n\nsymptoms_name = 'koos_sx'\nsymptoms_idx = koos_metrics.index(symptoms_name)\nsymptoms_ang = angles[symptoms_idx]\n\nif not patient_df.loc['5 to 7 months'].isna().all():\n    val_57 = patient_df.loc['5 to 7 months', metric_name]\n    axes[0].annotate(\"Patient Quality of life\\nfalls short to cohort averages\", xy=(metric_ang, val_57), xytext=(metric_ang - 0.6, val_57 + 25), arrowprops=dict(arrowstyle='-&gt;', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n\nif not patient_df.loc['8 to 12 months'].isna().all():\n    val_812 = patient_df.loc['8 to 12 months', metric_name]\n    axes[1].annotate(\"Patient Quality of life significantly\\noutperforms cohort averages\", xy=(metric_ang, val_812), xytext=(metric_ang + 0.4, val_812 + 35), arrowprops=dict(arrowstyle='-&gt;', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n\n\nif not patient_df.loc['5 to 7 months'].isna().all():\n    val_812 = patient_df.loc['5 to 7 months', symptoms_name]\n    axes[0].annotate(\"Patient symptoms recovered\\nbetter than cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang -0.45, val_812 + 15), arrowprops=dict(arrowstyle='-&gt;', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n\nif not patient_df.loc['8 to 12 months'].isna().all():\n    val_812 = patient_df.loc['8 to 12 months', symptoms_name]\n    axes[1].annotate(\"Patient symptom recovery\\nfalls short to cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang - 0.4, val_812 + 30), arrowprops=dict(arrowstyle='-&gt;', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n\n# legend customization\nhandles, labels = axes[-1].get_legend_handles_labels()\nfig.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.46, 0.75), ncol=1, frameon=False, fontsize=9)\n\nplt.figtext(0.01, 0.1, 'Note: KOOS scores range from 0 (extreme) to 100 (perfectly healthy). Data compares one patient to cohort wide averages in the two month ranges.', fontsize=10, ha='left')\nplt.figtext(0.01, 0.05,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\n\nplt.tight_layout()\nplt.subplots_adjust(top=0.83)\n\n\nfig.text(0.185, 0.84, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\nfig.text(0.186, 0.84, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\nfig.text(0.31, 0.84, 'recovery status from the self-reported KOOS Metric', ha='left', va='center', fontsize=16, fontweight='bold')\nfig.text(0.5, 0.8, 'A comprehensive outlook at how Patient 101 feels in terms of their post-surgical recovery at each of the monthly visits', ha='center', va='center', fontsize=12)\n\n\nplt.savefig('Radar_small_multiples.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\nRadar small multiples",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#grouped-box-plots-of-recovery-metrics",
    "href": "dataviz.html#grouped-box-plots-of-recovery-metrics",
    "title": "4  Data Visualization",
    "section": "5.3 Grouped Box Plots of Recovery Metrics",
    "text": "5.3 Grouped Box Plots of Recovery Metrics\n# using the raw dataset rather than the cleaned imputed dataset as the imputed dataset destroys the inter-quartile range\ndf = pd.read_csv('aclr data(in).csv')\n\n# splitting the data set into patient and cohort for comparison\npatient_id = 101\ndf_patient = df[df['record_id'] == patient_id]\ndf_cohort  = df[df['record_id'] != patient_id]\n\n# calculating patient records by time since surgery\ndf_patient_5_7  = df_patient[df_patient['tss_dashboard'] == '5 to 7 months']\ndf_patient_8_12 = df_patient[df_patient['tss_dashboard'] == '8 to 12 months']\n\nstrength_tests    = [\n    'acl_flex_isok_60', 'acl_ext_isok_60',\n    'lsi_flex_isok_60', 'lsi_ext_isok_60'\n]\npr_outcomes       = ['ikdc', 'acl_rsi']\nfunctional_scores = ['ch_lsi', 'th_lsi', 'sh_lsi']\n\nlabels = {\n    'acl_flex_isok_60': 'Isokinetic Knee Flexion (60°/s)',\n    'acl_ext_isok_60': 'Isokinetic Knee Extension (60°/s)',\n    'lsi_flex_isok_60':'Limb Symmetry Index:\\nIsokinetic Flexion',\n    'lsi_ext_isok_60': 'Limb Symmetry Index:\\nIsokinetic Extension',\n    'ikdc': 'IKDC Score',\n    'acl_rsi': 'ACL–Return to Sport Index',\n    'ch_lsi': 'Cross-Over Hop LSI',\n    'th_lsi': 'Triple Hop LSI',\n    'sh_lsi': 'Single Hop LSI'\n}\n\nbox_color = 'lightgrey'  \npatient_color = '#FF6E00'   \n\nplt.figure(figsize=(18, 10))\nplt.subplots_adjust(top=0.85, left=0, right=0.78, bottom=0.08, wspace=0.6)\n\n\naxes = [plt.subplot(1, 3, i) for i in range(1, 4)]\ngroups = [strength_tests, pr_outcomes, functional_scores]\ntitles = [\"Strength Tests\", \"Patient-Reported Outcomes\", \"Functional Assessment Scores\"]\n\nfor ax, metrics, title in zip(axes, groups, titles):\n    cohort_data   = []\n    valid_metrics = []\n\n    # calculating cohort values\n    for m in metrics:\n        vals = df_cohort[m].dropna().values\n        if len(vals) &gt;= 2:\n            cohort_data.append(vals)\n            valid_metrics.append(m)\n    bp = ax.boxplot(\n        cohort_data,\n        positions = np.arange(len(valid_metrics)),\n        vert = False,\n        widths = 0.6,\n        patch_artist = True,\n        showfliers = False,\n        showmeans = False,\n        boxprops = dict(facecolor=box_color, edgecolor='black', linewidth=1.5),\n        whiskerprops = dict(color='black'),\n        capprops = dict(color='black'),\n        medianprops = dict(color='black', linewidth=2)\n    )\n\n    # creating legend labels \n    if valid_metrics:\n        bp['boxes'][0].set_label('Cohort IQR')\n        bp['medians'][0].set_label('Cohort Median')\n\n    # calculating the positioning for the patient's medians for each TSS range\n    for i, m in enumerate(valid_metrics):\n        pm1 = df_patient_5_7[m].median()\n        pm2 = df_patient_8_12[m].median()\n        if not np.isnan(pm1):\n            sc1 = ax.scatter(pm1, i, marker='D', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n            if i == 0:\n                sc1.set_label('Patient metric 5–7 months')\n        if not np.isnan(pm2):\n            sc2 = ax.scatter(pm2, i, marker='s', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n            if i == 0:\n                sc2.set_label('Patient metric 8–12 months')\n\n    # axis styling and autoscaling the x-axis\n    ax.set_yticks(np.arange(len(valid_metrics)))\n    ax.set_yticklabels([labels[m] for m in valid_metrics], fontsize=10)\n    ax.tick_params(axis='y', pad=12)\n    ax.set_title(title, fontsize=12, fontweight='bold', loc='left')\n\n    ax.margins(x=0.02)\n    ax.set_xlim(left=0)\n    ax.autoscale(enable=True, axis='x')\n\n    # labeling out the percentage ticks\n    ax.set_xticks([0, 25, 50, 75, 100, 125, 150])\n    ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%', '125%', '150%'], alpha=0.5)\n\n    ax.grid(axis='x', linestyle='-', color='white', alpha=1)\n    for spine in ['top', 'right', 'bottom']:\n        ax.spines[spine].set_visible(False)\n        \naxes[-1].legend(loc='lower right', bbox_to_anchor=(1.6, 0.45), frameon=False, fontsize=10)\n\nplt.figtext(0.07, 0.93, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\nplt.figtext(0.072, 0.93, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\nplt.figtext(0.155, 0.93, 'recovery status from miscellaneous medical testings', ha='left', va='center', fontsize=16, fontweight='bold')\nplt.figtext(-0.007, 0.9, 'Gray boxes = IQR (25–75%), black line = median, orange ◆ = patient recovery for 5-7 months, ■ = patient recovery for 8-12 months', ha='left', va='center',fontsize=12)\n\nplt.figtext(0, 0.03, 'Note: Recovery Metrics are represented in percentages. Data compares cohort median with different stages of recovery from the patient', fontsize=10, ha='left')\nplt.figtext(0, -0.01,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\nplt.savefig('stacked_horizontal_boxplots.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n\n\n\nBox plots",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "5  Data Dictionary",
    "section": "",
    "text": "Variable\nDescription\n\n\n\n\nrecord_id\nRandom record id assigned to a patient (unique to each patient)\n\n\nsex_dashboard\nSex of the patient (Male, Female, Not reported)\n\n\nkoos_pain\nPatient reported pain level via survey questions (scale = 0–100)\n\n\nkoos_sx\nPatient reported symptoms via survey questions (scale = 0–100)\n\n\nkoos_adl\nDifficulties with activities of daily living (scale = 0–100)\n\n\nkoos_sport\nDifficulties related to sport and recreation (scale = 0–100)\n\n\nkoos_qol\nKnee-related quality of life (scale = 0–100)\n\n\ntss_dashboard\nGrouped months since surgery (e.g., perioperative, 3–4 months…)\n\n\nacl_flex_isok_60\nTorque of isokinetic flexion at 60°/s: peak torque recorded (Nm/kg)\n\n\nacl_ext_isok_60\nTorque of isokinetic extension at 60°/s: peak torque recorded (Nm/kg)\n\n\nacl_ext_mvic_60\nKnee Extension MVIC at 60°: peak torque recorded (Nm/kg)\n\n\nlsi_ext_mvic_60\nLimb symmetry index of knee extension torque (Nm/kg)\n\n\nlsi_flex_isok_60\nLimb symmetry index of isokinetic flexion torque (Nm/kg)\n\n\nlsi_ext_iok_60\nLimb symmetry index of isokinetic extension torque (Nm/kg)\n\n\npedi_ikdc\nKnee function score for patients aged 10–18 (scale = 0–100)\n\n\nikdc\nAdult knee function score using IKDC form (scale = 0–100)\n\n\nacl_rsi\nReturn to Sport after Injury Scale score (scale = 0–100)\n\n\nch_lsi\nCrossover Hop limb symmetry index (percentage)\n\n\nth_lsi\nTriple Hop limb symmetry index (percentage)\n\n\nsh_lsi\nSingle Hop limb symmetry index (percentage)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]