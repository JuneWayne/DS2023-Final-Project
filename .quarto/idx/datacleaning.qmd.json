{"title":"Data Cleaning","markdown":{"yaml":{"title":"Data Cleaning","format":"html"},"headingText":"Data Cleaning - Removing unnecessary columns, renaming variables, identifying missing values, imputing missing values","containsRefs":false,"markdown":"\n\n\n### Removing unnecessary columns (columns with zero data)\n\n```python\ndf.columns[df.isnull().all()]# these are columns that have no data ( we need to drop)\n\ndf.drop(columns=['redcap_repeat_instrument', 'tss_tegner'], inplace=True)\n\ntotal_rows = len(df)\nmissing_summary = pd.DataFrame({\"Column Name\": df.columns,\"Non-Null Count\": df.notnull().sum().values,\"% Missing\": df.isnull().mean().values * 100})\n\nmissing_summary = missing_summary.sort_values(by=\"% Missing\", ascending=False)\n\nmissing_summary\n```\n| Column Name               | Non-Null Count | % Missing   |\n|---------------------------|----------------|-------------|\n| record_id                 | 11150          | 0.00%       |\n| redcap_event_name         | 11150          | 0.00%       |\n| sex_dashboard             | 4737           | 57.52%      |\n| graft_dashboard2          | 4737           | 57.52%      |\n| med_meniscus              | 4121           | 63.04%      |\n| lat_meniscus              | 4121           | 63.04%      |\n| lat_stab                  | 3662           | 67.16%      |\n| physis                    | 936            | 91.61%      |\n| visit_sex                 | 5234           | 53.06%      |\n| visit_graft               | 5234           | 53.06%      |\n| age                       | 5126           | 54.02%      |\n| age_group                 | 5126           | 54.02%      |\n| age_group_dashboard       | 4724           | 57.62%      |\n| age_group_dashboard_use   | 5237           | 53.02%      |\n| height_m                  | 2518           | 77.41%      |\n| mass_kg                   | 3251           | 70.84%      |\n| bmi                       | 2517           | 77.42%      |\n| tss                       | 5125           | 54.04%      |\n| tss_dashboard             | 5237           | 53.02%      |\n| reinjury                  | 5175           | 53.58%      |\n| ikdc                      | 2951           | 73.53%      |\n| pedi_ikdc                 | 1647           | 85.23%      |\n| marx                      | 911            | 91.83%      |\n| pedi_fabs                 | 37             | 99.67%      |\n| koos_version              | 2637           | 76.35%      |\n| koos_pain                 | 2767           | 75.17%      |\n| koos_sx                   | 2769           | 75.15%      |\n| koos_adl                  | 2769           | 75.15%      |\n| koos_sport                | 2768           | 75.16%      |\n| koos_qol                  | 2775           | 75.10%      |\n\n\n**Looking for missing values in the rest of the columns**\n\n```python\ndf.isnull().sum() # looking for missing data\n```\n| Column Name                 | Missing Values |\n|-----------------------------|----------------|\n| record_id                   | 0              |\n| redcap_event_name           | 0              |\n| sex_dashboard               | 6413           |\n| graft_dashboard2            | 6413           |\n| med_meniscus                | 7029           |\n| ...                         | ...            |\n| con_flex_isok_60            | 9402           |\n| lsi_flex_isok_60            | 8928           |\n| strength_testing_complete   | 5913           |\n| rts                         | 10464          |\n| rts_tss                     | 10479          |\n\n**Finding the top few columns that have the least percentage of missing values, this shows that there exists a huge volume of missing values in the dataset and that imputation is very necessary in order to make any meaningful insight out of this dataset**\n\n```python\nmissing_percent = df.isnull().sum() / len(df) * 100\nprint(missing_percent.nsmallest(10))\n```\n| Column Name                 | % Missing Values |\n|-----------------------------|------------------|\n| record_id                   | 0.000000         |\n| redcap_event_name           | 0.000000         |\n| age_group_dashboard_use     | 53.031390        |\n| tss_dashboard               | 53.031390        |\n| strength_testing_complete   | 53.031390        |\n| visit_sex                   | 53.058296        |\n| visit_graft                 | 53.058296        |\n| reinjury                    | 53.587444        |\n| age                         | 54.026906        |\n| age_group                   | 54.026906        |\n\n### Seeing values to make the nan as Not reported\n\n**Before carrying out imputation for the missing values, replace all 'NaN' entries in the various demographic variables as Not reported for consistency**\n\n```python\nprint(df[\"sex_dashboard\"].unique())\nprint(df['visit_sex'].unique())\nprint(df['age_group_dashboard_use'].unique())\nprint(df['graft_dashboard2'].unique())\nprint(df['visit_graft'].unique())\n```\n['Male' nan 'Female' 'Not Reported']\n[nan 'Male' 'Female' 'Not Reported']\n[nan '21 to 25 years' '12 to 14 years' '15 to 17 years' '18 to 20 years'\n '26 to 34 years' 'Not Reported']\n['Other' nan 'HS autograft' 'BTB autograft' 'Allograft' 'QT autograft']\n[nan 'Other' 'HS autograft' 'BTB autograft' 'Allograft' 'QT autograft']\n\n```python\nprint(df['redcap_event_name'].unique())\n```\n['baseline_arm_1' 'visit_1_arm_1' 'long_term_outcomes_arm_1'\n 'visit_2_arm_1' 'visit_3_arm_1' 'visit_4_arm_1' 'visit_5_arm_1'\n 'visit_6_arm_1' 'data_upload_arm_2' 'visit_7_arm_1' 'visit_8_arm_1'\n 'visit_9_arm_1']\n\n ```python\n print(df['strength_testing_complete'].unique())\n ```\n [nan  2.  0.]\n\n ```python\nprint(df['med_meniscus'].unique())\nprint(df['lat_meniscus'].unique())\n```\n[nan  1.  3.  2.]\n[nan  3.  1.  2.]\n\n**Gender, Age Groups, ( make the nan as Not reported) ( input)**\n\n```python\ndf['age_group_dashboard_use'] = df['age_group_dashboard_use'].fillna('Not Reported')\ndf['sex_dashboard'] = df['sex_dashboard'].fillna('Not Reported')\ndf['visit_sex'] = df['visit_sex'].fillna('Not Reported')\n```\n\n**Visualizing and observing the presence of missing values across all columns and taking a look at what columns are useful, and what columns are meaningless**\n\n```python\n# I've also included a visual aid of how many missing values we have for each variable\n# Bar plot of missing values for each column\nmissing_vals = df.isnull().sum()\nmissing_vals = missing_vals[missing_vals > 0] # making sure to inlcude only the missing values ( no variables with complete)\nmissing_vals.sort_values(inplace=True)\n\nplt.figure(figsize=(14, 10))\nmissing_vals.plot(kind='barh', color='lightcoral') # making this horizontal bargraph to enhance readability\nplt.title('Missing Values Visualized', fontsize=20)# let's make sure the title is big\nplt.xlabel('# of Missing Values ', fontsize=10)\nplt.ylabel('Columns', fontsize=10)\nplt.xticks(fontsize=8)\nplt.yticks(fontsize=8)\nplt.gca().invert_yaxis() # we need this code to ensure that we have the missing values inverted\nplt.savefig('missing_values.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![missing values](missing_values.png)\n\n```python\nure(figsize=(12, 12))\nsns.boxplot(data=df, orient=\"h\")\nplt.title(\"Outlier present\")\nplt.savefig('outliers.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![outliers](outliers.png)\n\n**Exploratory phase: to impute data more effectively, we chose to split the imputation process by categorical and numerical variables. We chose to impute the categorical variables via the frequency of a cateogory's presence in the dataset, and impute the numerical variables via the mean of the column's numerical values.**\n\n```python\n# Let's split the categorical and numerical columns\ncategorical_columns = df.select_dtypes(include=['object']).columns # this includes strings\nnumerical_columns = df.select_dtypes(include=['float64', 'int64']).columns # these are numbers with meaning\n\n# Now let's impute categorical(mode) and numerical columns (median)\ndf[categorical_columns] = df[categorical_columns].fillna(df[categorical_columns].mode().iloc[0])\ndf[numerical_columns] = df[numerical_columns].fillna(df[numerical_columns].median())\n\ndf.isnull().sum()\n```\n| Column Name              | Missing Values |\n|--------------------------|----------------|\n| record_id                | 0              |\n| redcap_event_name        | 0              |\n| sex_dashboard            | 0              |\n| graft_dashboard2         | 0              |\n| med_meniscus             | 0              |\n| ...                      | ...            |\n| con_flex_isok_60         | 0              |\n| lsi_flex_isok_60         | 0              |\n| strength_testing_complete| 0              |\n| rts                      | 0              |\n| rts_tss                  | 0              |\n\n","srcMarkdownNoYaml":"\n\n## Data Cleaning - Removing unnecessary columns, renaming variables, identifying missing values, imputing missing values\n\n### Removing unnecessary columns (columns with zero data)\n\n```python\ndf.columns[df.isnull().all()]# these are columns that have no data ( we need to drop)\n\ndf.drop(columns=['redcap_repeat_instrument', 'tss_tegner'], inplace=True)\n\ntotal_rows = len(df)\nmissing_summary = pd.DataFrame({\"Column Name\": df.columns,\"Non-Null Count\": df.notnull().sum().values,\"% Missing\": df.isnull().mean().values * 100})\n\nmissing_summary = missing_summary.sort_values(by=\"% Missing\", ascending=False)\n\nmissing_summary\n```\n| Column Name               | Non-Null Count | % Missing   |\n|---------------------------|----------------|-------------|\n| record_id                 | 11150          | 0.00%       |\n| redcap_event_name         | 11150          | 0.00%       |\n| sex_dashboard             | 4737           | 57.52%      |\n| graft_dashboard2          | 4737           | 57.52%      |\n| med_meniscus              | 4121           | 63.04%      |\n| lat_meniscus              | 4121           | 63.04%      |\n| lat_stab                  | 3662           | 67.16%      |\n| physis                    | 936            | 91.61%      |\n| visit_sex                 | 5234           | 53.06%      |\n| visit_graft               | 5234           | 53.06%      |\n| age                       | 5126           | 54.02%      |\n| age_group                 | 5126           | 54.02%      |\n| age_group_dashboard       | 4724           | 57.62%      |\n| age_group_dashboard_use   | 5237           | 53.02%      |\n| height_m                  | 2518           | 77.41%      |\n| mass_kg                   | 3251           | 70.84%      |\n| bmi                       | 2517           | 77.42%      |\n| tss                       | 5125           | 54.04%      |\n| tss_dashboard             | 5237           | 53.02%      |\n| reinjury                  | 5175           | 53.58%      |\n| ikdc                      | 2951           | 73.53%      |\n| pedi_ikdc                 | 1647           | 85.23%      |\n| marx                      | 911            | 91.83%      |\n| pedi_fabs                 | 37             | 99.67%      |\n| koos_version              | 2637           | 76.35%      |\n| koos_pain                 | 2767           | 75.17%      |\n| koos_sx                   | 2769           | 75.15%      |\n| koos_adl                  | 2769           | 75.15%      |\n| koos_sport                | 2768           | 75.16%      |\n| koos_qol                  | 2775           | 75.10%      |\n\n\n**Looking for missing values in the rest of the columns**\n\n```python\ndf.isnull().sum() # looking for missing data\n```\n| Column Name                 | Missing Values |\n|-----------------------------|----------------|\n| record_id                   | 0              |\n| redcap_event_name           | 0              |\n| sex_dashboard               | 6413           |\n| graft_dashboard2            | 6413           |\n| med_meniscus                | 7029           |\n| ...                         | ...            |\n| con_flex_isok_60            | 9402           |\n| lsi_flex_isok_60            | 8928           |\n| strength_testing_complete   | 5913           |\n| rts                         | 10464          |\n| rts_tss                     | 10479          |\n\n**Finding the top few columns that have the least percentage of missing values, this shows that there exists a huge volume of missing values in the dataset and that imputation is very necessary in order to make any meaningful insight out of this dataset**\n\n```python\nmissing_percent = df.isnull().sum() / len(df) * 100\nprint(missing_percent.nsmallest(10))\n```\n| Column Name                 | % Missing Values |\n|-----------------------------|------------------|\n| record_id                   | 0.000000         |\n| redcap_event_name           | 0.000000         |\n| age_group_dashboard_use     | 53.031390        |\n| tss_dashboard               | 53.031390        |\n| strength_testing_complete   | 53.031390        |\n| visit_sex                   | 53.058296        |\n| visit_graft                 | 53.058296        |\n| reinjury                    | 53.587444        |\n| age                         | 54.026906        |\n| age_group                   | 54.026906        |\n\n### Seeing values to make the nan as Not reported\n\n**Before carrying out imputation for the missing values, replace all 'NaN' entries in the various demographic variables as Not reported for consistency**\n\n```python\nprint(df[\"sex_dashboard\"].unique())\nprint(df['visit_sex'].unique())\nprint(df['age_group_dashboard_use'].unique())\nprint(df['graft_dashboard2'].unique())\nprint(df['visit_graft'].unique())\n```\n['Male' nan 'Female' 'Not Reported']\n[nan 'Male' 'Female' 'Not Reported']\n[nan '21 to 25 years' '12 to 14 years' '15 to 17 years' '18 to 20 years'\n '26 to 34 years' 'Not Reported']\n['Other' nan 'HS autograft' 'BTB autograft' 'Allograft' 'QT autograft']\n[nan 'Other' 'HS autograft' 'BTB autograft' 'Allograft' 'QT autograft']\n\n```python\nprint(df['redcap_event_name'].unique())\n```\n['baseline_arm_1' 'visit_1_arm_1' 'long_term_outcomes_arm_1'\n 'visit_2_arm_1' 'visit_3_arm_1' 'visit_4_arm_1' 'visit_5_arm_1'\n 'visit_6_arm_1' 'data_upload_arm_2' 'visit_7_arm_1' 'visit_8_arm_1'\n 'visit_9_arm_1']\n\n ```python\n print(df['strength_testing_complete'].unique())\n ```\n [nan  2.  0.]\n\n ```python\nprint(df['med_meniscus'].unique())\nprint(df['lat_meniscus'].unique())\n```\n[nan  1.  3.  2.]\n[nan  3.  1.  2.]\n\n**Gender, Age Groups, ( make the nan as Not reported) ( input)**\n\n```python\ndf['age_group_dashboard_use'] = df['age_group_dashboard_use'].fillna('Not Reported')\ndf['sex_dashboard'] = df['sex_dashboard'].fillna('Not Reported')\ndf['visit_sex'] = df['visit_sex'].fillna('Not Reported')\n```\n\n**Visualizing and observing the presence of missing values across all columns and taking a look at what columns are useful, and what columns are meaningless**\n\n```python\n# I've also included a visual aid of how many missing values we have for each variable\n# Bar plot of missing values for each column\nmissing_vals = df.isnull().sum()\nmissing_vals = missing_vals[missing_vals > 0] # making sure to inlcude only the missing values ( no variables with complete)\nmissing_vals.sort_values(inplace=True)\n\nplt.figure(figsize=(14, 10))\nmissing_vals.plot(kind='barh', color='lightcoral') # making this horizontal bargraph to enhance readability\nplt.title('Missing Values Visualized', fontsize=20)# let's make sure the title is big\nplt.xlabel('# of Missing Values ', fontsize=10)\nplt.ylabel('Columns', fontsize=10)\nplt.xticks(fontsize=8)\nplt.yticks(fontsize=8)\nplt.gca().invert_yaxis() # we need this code to ensure that we have the missing values inverted\nplt.savefig('missing_values.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![missing values](missing_values.png)\n\n```python\nure(figsize=(12, 12))\nsns.boxplot(data=df, orient=\"h\")\nplt.title(\"Outlier present\")\nplt.savefig('outliers.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![outliers](outliers.png)\n\n**Exploratory phase: to impute data more effectively, we chose to split the imputation process by categorical and numerical variables. We chose to impute the categorical variables via the frequency of a cateogory's presence in the dataset, and impute the numerical variables via the mean of the column's numerical values.**\n\n```python\n# Let's split the categorical and numerical columns\ncategorical_columns = df.select_dtypes(include=['object']).columns # this includes strings\nnumerical_columns = df.select_dtypes(include=['float64', 'int64']).columns # these are numbers with meaning\n\n# Now let's impute categorical(mode) and numerical columns (median)\ndf[categorical_columns] = df[categorical_columns].fillna(df[categorical_columns].mode().iloc[0])\ndf[numerical_columns] = df[numerical_columns].fillna(df[numerical_columns].median())\n\ndf.isnull().sum()\n```\n| Column Name              | Missing Values |\n|--------------------------|----------------|\n| record_id                | 0              |\n| redcap_event_name        | 0              |\n| sex_dashboard            | 0              |\n| graft_dashboard2         | 0              |\n| med_meniscus             | 0              |\n| ...                      | ...            |\n| con_flex_isok_60         | 0              |\n| lsi_flex_isok_60         | 0              |\n| strength_testing_complete| 0              |\n| rts                      | 0              |\n| rts_tss                  | 0              |\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"datacleaning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","theme":{"light":"minty"},"code-fode":false,"backgroundcolor":"#FFFFFF","title":"Data Cleaning"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}