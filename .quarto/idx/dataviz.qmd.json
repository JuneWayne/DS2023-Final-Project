{"title":"Data Visualization","markdown":{"yaml":{"title":"Data Visualization","format":"html","execute":{"echo":true,"eval":false}},"headingText":"**Data Visualization**","containsRefs":false,"markdown":"\n\n\nThis section documents the code used to generate the three visualizations in the final report: \n\n## KOOS Pain Recovery Trajectory\n\n```python\n#Importing Necessary Packages\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random # this is used to select random patients to sample/project on our visualization since we are limiting the number of paitents (lines), being shown on the page.\n\n#SETTING THE SEED- for reproducibility\nrandom.seed(42)\n\n# Let's Remove \"Preoperative\" stage ( only has a few lines so it's not worth out puting)\ndf_filtered = df[df['tss_dashboard'] != 'Preoperative']\n\n# Map timepoints (we do this because the default was unordered and didn't have a logical flow)\ntss_mapping = {\n    \"3 to 4 months\": 0,\n    \"5 to 7 months\": 1,\n    \"8 to 12 months\": 2,\n    \"13 to 24 months\": 3,\n}\n\ndf_filtered['time_ordered'] = df_filtered['tss_dashboard'].map(tss_mapping)\n# Setting the x-axis labels in correct order\nlabels = [t for t, a in sorted(tss_mapping.items(), key=lambda x: x[1])]\n\n# Keeping patients with at least 3 timepoints, includeing  patient 101 ( which is our selected patient of focus)\n#Consulted with CHATGTP for a little help refining and structreing this part\n\n# What this does is it looks through the record_id and selects the rows that have the same record_id show up atleast 3 times\nv = df_filtered['record_id'].value_counts()[lambda x: x >= 3].index\nv = v.union([101]) #  Used documentation on how to structure this and use the union function\ndf_3 = df_filtered[df_filtered['record_id'].isin(v)]\n\n# Let's choose  up to 200 others  patients ( we are doing this so we can compare patient 101 and see relative paths it could take)\nother_ids = [i for i in df_3['record_id'].unique() if i != 101] # this filters record_ids ( that show up at 3 different timepoints) excluding patient 101 ( record_id)\nsampled_ids = random.sample(other_ids, min(200, len(other_ids))) # this samples 200 random record_ids pateints\nsampled_ids.append(101)#(this adds the record_id 101 ( our target pateint))\n\n# this is full dataframe where it includes both the 200 sampled record_ids and our target paitent 101\ndf_sampled = df_3[df_3['record_id'].isin(sampled_ids)]\n\n\n\n# MAKING THE GRAPH (PLOTTING)\nplt.figure(figsize=(14, 7))\n\n\n#Plotting other patient lines (for comparison)- conditional for making all other sample record_ids grey\nfor p, group in df_sampled.groupby('record_id'):\n    if p != 101:\n        plt.plot(group['time_ordered'], group['koos_pain'], color='gray', alpha=0.2, linewidth=1)\n\n#Mean trajectory of other patients ( this may be useful to see how our paitent 101 is doing comparing to others ( in that sample))\nmean_traj = df_sampled[df_sampled['record_id'] != 101].groupby('time_ordered')['koos_pain'].mean()\nplt.plot(mean_traj.index, mean_traj.values, color='blue', linestyle='--', linewidth=2, label='Mean Trajectory') # blue is a good choice\n\n# Recovery phases- for visual aiding\nplt.axvspan(0, 1, color='gold', alpha=0.1, label='Early Recovery Stage')\nplt.axvspan(1, 2, color='orange', alpha=0.1, label='Mid Recovery Stage')\nplt.axvspan(2, 3, color='green', alpha=0.1, label='Late Recovery Stage')\n\n# Let's Highlight Patient 101\nben = df_sampled[df_sampled['record_id'] == 101].sort_values('time_ordered') #this makes a new column that has information on our benchmark patient\nplt.plot(ben['time_ordered'], ben['koos_pain'], color='orange', linewidth=2.5) # red to show importance\n# Annotate each point on Patient 101's line with the KOOS Pain score value\nfor x, y in zip(ben['time_ordered'], ben['koos_pain']):\n    plt.text(x, y + 1, f'{y:.1f}', color='orange', fontsize=9, ha='left')\n\n\n# styling\nplt.xticks(ticks=range(len(labels)), labels=labels)\nplt.xlabel('Time Since Surgery',fontsize=12)\nplt.ylabel('KOOS Pain Score', fontsize=12)\nplt.text(-0.2, 105, 'Post-ACLR KOOS Pain Scores: Where Does',fontsize=20, fontweight='bold', ha='left')\nplt.text(1.613, 105, 'Patient 101', fontsize=20, fontweight='bold', ha='left', color='#FF6E00')\nplt.text(2.12, 105, 'Fit in the Recovery Spectrum?', fontsize=20, fontweight='bold', ha='left')\nplt.grid(False)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['left'].set_position(('outward', -30))\nplt.tick_params(axis='x', which='both', length=0, pad= 15)\nplt.figtext(0.01, -0.05, 'Note: KOOS Pain scores range from 0 (extreme pain) to 100 (no pain). Data includes randomly sampled patients with at least 3 observations.', fontsize=10, ha='left')\nplt.figtext(0.01, -0.08, \"Note: Multiple observations may exist within a time bin\")\nplt.figtext(0.01, -0.16,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\nplt.legend(loc='lower right', bbox_to_anchor=(0.9, 0.1), facecolor=\"white\")\nplt.tight_layout()\nplt.savefig('KOOS_Pain_Recovery_Trajectory.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![Spaghetti Graph - KOOS Pain Trajectory](KOOS_Pain_Recovery_Trajectory_new.png)\n\n## Radar small multiples Graph of KOOS Self-reported metrics\n\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# aggregate together the evaluative metrics as well as the visit sessions\nkoos_metrics = ['koos_pain', 'koos_sx', 'koos_adl', 'koos_sport', 'koos_qol']\nvisits = ['5 to 7 months', '8 to 12 months']  # only the two ranges we care about\n\n# calculating the visit-wise averages of each metric\nkoos_avg = df.groupby('tss_dashboard')[koos_metrics].mean().loc[visits]\n\n# calculating patient 101 and average duplicates\npatient_df = (\n    df[df['record_id'] == 101]\n      .groupby('tss_dashboard')[koos_metrics]\n      .mean()\n      .reindex(visits)\n)\n\n# ensuring that each small-multiple panels share the same scale\nmin_value = min(koos_avg.min().min(), patient_df.min().min())\nmax_value = max(koos_avg.max().max(), patient_df.max().max())\nmargin_value = (max_value - min_value) * 0.1\n\n# angles for the five KOOS spokes\nN = len(koos_metrics)\nangles = np.linspace(0, 2*np.pi, N, endpoint=False).tolist()\nangles += angles[:1]\n\n# set up the side-by-side polar subplots\nfig, axes = plt.subplots(nrows=1, ncols=len(visits), subplot_kw=dict(polar=True), figsize=(12, 8))\nif len(visits) == 1:\n    axes = [axes]\n\navg_colors = ['#777777', '#777777']\npatient_colors = ['#FF6E00', '#FF6E00']\n\n# loop through each visit stage and dedicated axis\nfor idx in range(len(visits)):\n    stage = visits[idx]\n    ax = axes[idx]\n    ax.set_facecolor('white')\n    ax.set_ylim([min_value - margin_value, max_value + margin_value])\n\n    avg_vals = koos_avg.loc[stage].tolist()\n    avg_vals.append(avg_vals[0])\n    ax.plot(angles, avg_vals, label='Cohort average', color=avg_colors[idx], linewidth=2)\n    ax.fill(angles, avg_vals, color=avg_colors[idx], alpha=0.08)\n\n    if not patient_df.loc[stage].isna().all():\n        pat_vals = patient_df.loc[stage].tolist()\n        pat_vals.append(pat_vals[0])\n        ax.plot(angles, pat_vals, label='Patient 101', color=patient_colors[idx], linewidth=2.5)\n        ax.fill(angles, pat_vals, color=patient_colors[idx], alpha=0.25)\n\n    labels = ['Pain Intensity', 'Symptoms', 'Activities of\\nDaily Living', 'Intense\\nAthletic\\nMovements', 'Quality of Life (By Knee)']\n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels(['']*N)\n    radial_push = [3, 4, 6, 6, 5]\n    for ang, txt, extra in zip(angles[:-1], labels, radial_push):\n        r = max_value + margin_value + extra\n        ha = 'left' if (0 <= ang <= np.pi/2 or 3*np.pi/2 <= ang <= 2*np.pi) else 'right'\n        ax.text(ang, r, txt, ha=ha, va='center', fontsize=10, color='#333333')\n\n    ax.tick_params(colors='#666666')\n    ax.yaxis.grid(True, color='#DDDDDD', linewidth=0.8)\n    ax.xaxis.grid(False)\n    ticks = np.linspace(min_value, max_value, 6)\n    ax.set_yticks(ticks)\n    ax.set_yticklabels([f\"{x:.0f}\" for x in ticks], fontsize=8)\n    ax.set_title(stage, y=1.08, fontweight='bold', fontsize=13)\n\n# drawing the arrows\nmetric_name = 'koos_qol'\nmetric_idx = koos_metrics.index(metric_name)\nmetric_ang = angles[metric_idx]\n\nsymptoms_name = 'koos_sx'\nsymptoms_idx = koos_metrics.index(symptoms_name)\nsymptoms_ang = angles[symptoms_idx]\n\nif not patient_df.loc['5 to 7 months'].isna().all():\n    val_57 = patient_df.loc['5 to 7 months', metric_name]\n    axes[0].annotate(\"Patient Quality of life\\nfalls short to cohort averages\", xy=(metric_ang, val_57), xytext=(metric_ang - 0.6, val_57 + 25), arrowprops=dict(arrowstyle='->', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n\nif not patient_df.loc['8 to 12 months'].isna().all():\n    val_812 = patient_df.loc['8 to 12 months', metric_name]\n    axes[1].annotate(\"Patient Quality of life significantly\\noutperforms cohort averages\", xy=(metric_ang, val_812), xytext=(metric_ang + 0.4, val_812 + 35), arrowprops=dict(arrowstyle='->', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n\n\nif not patient_df.loc['5 to 7 months'].isna().all():\n    val_812 = patient_df.loc['5 to 7 months', symptoms_name]\n    axes[0].annotate(\"Patient symptoms recovered\\nbetter than cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang -0.45, val_812 + 15), arrowprops=dict(arrowstyle='->', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n\nif not patient_df.loc['8 to 12 months'].isna().all():\n    val_812 = patient_df.loc['8 to 12 months', symptoms_name]\n    axes[1].annotate(\"Patient symptom recovery\\nfalls short to cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang - 0.4, val_812 + 30), arrowprops=dict(arrowstyle='->', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n\n# legend customization\nhandles, labels = axes[-1].get_legend_handles_labels()\nfig.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.46, 0.75), ncol=1, frameon=False, fontsize=9)\n\nplt.figtext(0.01, 0.1, 'Note: KOOS scores range from 0 (extreme) to 100 (perfectly healthy). Data compares one patient to cohort wide averages in the two month ranges.', fontsize=10, ha='left')\nplt.figtext(0.01, 0.05,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\n\nplt.tight_layout()\nplt.subplots_adjust(top=0.83)\n\n\nfig.text(0.185, 0.84, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\nfig.text(0.186, 0.84, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\nfig.text(0.31, 0.84, 'recovery status from the self-reported KOOS Metric', ha='left', va='center', fontsize=16, fontweight='bold')\nfig.text(0.5, 0.8, 'A comprehensive outlook at how Patient 101 feels in terms of their post-surgical recovery at each of the monthly visits', ha='center', va='center', fontsize=12)\n\n\nplt.savefig('Radar_small_multiples.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![Radar small multiples](Radar_small_multiples.png)\n\n## Grouped Box Plots of Recovery Metrics\n```python\n# using the raw dataset rather than the cleaned imputed dataset as the imputed dataset destroys the inter-quartile range\ndf = pd.read_csv('aclr data(in).csv')\n\n# splitting the data set into patient and cohort for comparison\npatient_id = 101\ndf_patient = df[df['record_id'] == patient_id]\ndf_cohort  = df[df['record_id'] != patient_id]\n\n# calculating patient records by time since surgery\ndf_patient_5_7  = df_patient[df_patient['tss_dashboard'] == '5 to 7 months']\ndf_patient_8_12 = df_patient[df_patient['tss_dashboard'] == '8 to 12 months']\n\nstrength_tests    = [\n    'acl_flex_isok_60', 'acl_ext_isok_60',\n    'lsi_flex_isok_60', 'lsi_ext_isok_60'\n]\npr_outcomes       = ['ikdc', 'acl_rsi']\nfunctional_scores = ['ch_lsi', 'th_lsi', 'sh_lsi']\n\nlabels = {\n    'acl_flex_isok_60': 'Isokinetic Knee Flexion (60°/s)',\n    'acl_ext_isok_60': 'Isokinetic Knee Extension (60°/s)',\n    'lsi_flex_isok_60':'Limb Symmetry Index:\\nIsokinetic Flexion',\n    'lsi_ext_isok_60': 'Limb Symmetry Index:\\nIsokinetic Extension',\n    'ikdc': 'IKDC Score',\n    'acl_rsi': 'ACL–Return to Sport Index',\n    'ch_lsi': 'Cross-Over Hop LSI',\n    'th_lsi': 'Triple Hop LSI',\n    'sh_lsi': 'Single Hop LSI'\n}\n\nbox_color = 'lightgrey'  \npatient_color = '#FF6E00'   \n\nplt.figure(figsize=(18, 10))\nplt.subplots_adjust(top=0.85, left=0, right=0.78, bottom=0.08, wspace=0.6)\n\n\naxes = [plt.subplot(1, 3, i) for i in range(1, 4)]\ngroups = [strength_tests, pr_outcomes, functional_scores]\ntitles = [\"Strength Tests\", \"Patient-Reported Outcomes\", \"Functional Assessment Scores\"]\n\nfor ax, metrics, title in zip(axes, groups, titles):\n    cohort_data   = []\n    valid_metrics = []\n\n    # calculating cohort values\n    for m in metrics:\n        vals = df_cohort[m].dropna().values\n        if len(vals) >= 2:\n            cohort_data.append(vals)\n            valid_metrics.append(m)\n    bp = ax.boxplot(\n        cohort_data,\n        positions = np.arange(len(valid_metrics)),\n        vert = False,\n        widths = 0.6,\n        patch_artist = True,\n        showfliers = False,\n        showmeans = False,\n        boxprops = dict(facecolor=box_color, edgecolor='black', linewidth=1.5),\n        whiskerprops = dict(color='black'),\n        capprops = dict(color='black'),\n        medianprops = dict(color='black', linewidth=2)\n    )\n\n    # creating legend labels \n    if valid_metrics:\n        bp['boxes'][0].set_label('Cohort IQR')\n        bp['medians'][0].set_label('Cohort Median')\n\n    # calculating the positioning for the patient's medians for each TSS range\n    for i, m in enumerate(valid_metrics):\n        pm1 = df_patient_5_7[m].median()\n        pm2 = df_patient_8_12[m].median()\n        if not np.isnan(pm1):\n            sc1 = ax.scatter(pm1, i, marker='D', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n            if i == 0:\n                sc1.set_label('Patient metric 5–7 months')\n        if not np.isnan(pm2):\n            sc2 = ax.scatter(pm2, i, marker='s', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n            if i == 0:\n                sc2.set_label('Patient metric 8–12 months')\n\n    # axis styling and autoscaling the x-axis\n    ax.set_yticks(np.arange(len(valid_metrics)))\n    ax.set_yticklabels([labels[m] for m in valid_metrics], fontsize=10)\n    ax.tick_params(axis='y', pad=12)\n    ax.set_title(title, fontsize=12, fontweight='bold', loc='left')\n\n    ax.margins(x=0.02)\n    ax.set_xlim(left=0)\n    ax.autoscale(enable=True, axis='x')\n\n    # labeling out the percentage ticks\n    ax.set_xticks([0, 25, 50, 75, 100, 125, 150])\n    ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%', '125%', '150%'], alpha=0.5)\n\n    ax.grid(axis='x', linestyle='-', color='white', alpha=1)\n    for spine in ['top', 'right', 'bottom']:\n        ax.spines[spine].set_visible(False)\n        \naxes[-1].legend(loc='lower right', bbox_to_anchor=(1.6, 0.45), frameon=False, fontsize=10)\n\nplt.figtext(0.07, 0.93, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\nplt.figtext(0.072, 0.93, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\nplt.figtext(0.155, 0.93, 'recovery status from miscellaneous medical testings', ha='left', va='center', fontsize=16, fontweight='bold')\nplt.figtext(-0.007, 0.9, 'Gray boxes = IQR (25–75%), black line = median, orange ◆ = patient recovery for 5-7 months, ■ = patient recovery for 8-12 months', ha='left', va='center',fontsize=12)\n\nplt.figtext(0, 0.03, 'Note: Recovery Metrics are represented in percentages. Data compares cohort median with different stages of recovery from the patient', fontsize=10, ha='left')\nplt.figtext(0, -0.01,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\nplt.savefig('stacked_horizontal_boxplots.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![Box plots](stacked_horizontal_boxplots.png)\n\n","srcMarkdownNoYaml":"\n\n# **Data Visualization**\n\nThis section documents the code used to generate the three visualizations in the final report: \n\n## KOOS Pain Recovery Trajectory\n\n```python\n#Importing Necessary Packages\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random # this is used to select random patients to sample/project on our visualization since we are limiting the number of paitents (lines), being shown on the page.\n\n#SETTING THE SEED- for reproducibility\nrandom.seed(42)\n\n# Let's Remove \"Preoperative\" stage ( only has a few lines so it's not worth out puting)\ndf_filtered = df[df['tss_dashboard'] != 'Preoperative']\n\n# Map timepoints (we do this because the default was unordered and didn't have a logical flow)\ntss_mapping = {\n    \"3 to 4 months\": 0,\n    \"5 to 7 months\": 1,\n    \"8 to 12 months\": 2,\n    \"13 to 24 months\": 3,\n}\n\ndf_filtered['time_ordered'] = df_filtered['tss_dashboard'].map(tss_mapping)\n# Setting the x-axis labels in correct order\nlabels = [t for t, a in sorted(tss_mapping.items(), key=lambda x: x[1])]\n\n# Keeping patients with at least 3 timepoints, includeing  patient 101 ( which is our selected patient of focus)\n#Consulted with CHATGTP for a little help refining and structreing this part\n\n# What this does is it looks through the record_id and selects the rows that have the same record_id show up atleast 3 times\nv = df_filtered['record_id'].value_counts()[lambda x: x >= 3].index\nv = v.union([101]) #  Used documentation on how to structure this and use the union function\ndf_3 = df_filtered[df_filtered['record_id'].isin(v)]\n\n# Let's choose  up to 200 others  patients ( we are doing this so we can compare patient 101 and see relative paths it could take)\nother_ids = [i for i in df_3['record_id'].unique() if i != 101] # this filters record_ids ( that show up at 3 different timepoints) excluding patient 101 ( record_id)\nsampled_ids = random.sample(other_ids, min(200, len(other_ids))) # this samples 200 random record_ids pateints\nsampled_ids.append(101)#(this adds the record_id 101 ( our target pateint))\n\n# this is full dataframe where it includes both the 200 sampled record_ids and our target paitent 101\ndf_sampled = df_3[df_3['record_id'].isin(sampled_ids)]\n\n\n\n# MAKING THE GRAPH (PLOTTING)\nplt.figure(figsize=(14, 7))\n\n\n#Plotting other patient lines (for comparison)- conditional for making all other sample record_ids grey\nfor p, group in df_sampled.groupby('record_id'):\n    if p != 101:\n        plt.plot(group['time_ordered'], group['koos_pain'], color='gray', alpha=0.2, linewidth=1)\n\n#Mean trajectory of other patients ( this may be useful to see how our paitent 101 is doing comparing to others ( in that sample))\nmean_traj = df_sampled[df_sampled['record_id'] != 101].groupby('time_ordered')['koos_pain'].mean()\nplt.plot(mean_traj.index, mean_traj.values, color='blue', linestyle='--', linewidth=2, label='Mean Trajectory') # blue is a good choice\n\n# Recovery phases- for visual aiding\nplt.axvspan(0, 1, color='gold', alpha=0.1, label='Early Recovery Stage')\nplt.axvspan(1, 2, color='orange', alpha=0.1, label='Mid Recovery Stage')\nplt.axvspan(2, 3, color='green', alpha=0.1, label='Late Recovery Stage')\n\n# Let's Highlight Patient 101\nben = df_sampled[df_sampled['record_id'] == 101].sort_values('time_ordered') #this makes a new column that has information on our benchmark patient\nplt.plot(ben['time_ordered'], ben['koos_pain'], color='orange', linewidth=2.5) # red to show importance\n# Annotate each point on Patient 101's line with the KOOS Pain score value\nfor x, y in zip(ben['time_ordered'], ben['koos_pain']):\n    plt.text(x, y + 1, f'{y:.1f}', color='orange', fontsize=9, ha='left')\n\n\n# styling\nplt.xticks(ticks=range(len(labels)), labels=labels)\nplt.xlabel('Time Since Surgery',fontsize=12)\nplt.ylabel('KOOS Pain Score', fontsize=12)\nplt.text(-0.2, 105, 'Post-ACLR KOOS Pain Scores: Where Does',fontsize=20, fontweight='bold', ha='left')\nplt.text(1.613, 105, 'Patient 101', fontsize=20, fontweight='bold', ha='left', color='#FF6E00')\nplt.text(2.12, 105, 'Fit in the Recovery Spectrum?', fontsize=20, fontweight='bold', ha='left')\nplt.grid(False)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['left'].set_position(('outward', -30))\nplt.tick_params(axis='x', which='both', length=0, pad= 15)\nplt.figtext(0.01, -0.05, 'Note: KOOS Pain scores range from 0 (extreme pain) to 100 (no pain). Data includes randomly sampled patients with at least 3 observations.', fontsize=10, ha='left')\nplt.figtext(0.01, -0.08, \"Note: Multiple observations may exist within a time bin\")\nplt.figtext(0.01, -0.16,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\nplt.legend(loc='lower right', bbox_to_anchor=(0.9, 0.1), facecolor=\"white\")\nplt.tight_layout()\nplt.savefig('KOOS_Pain_Recovery_Trajectory.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![Spaghetti Graph - KOOS Pain Trajectory](KOOS_Pain_Recovery_Trajectory_new.png)\n\n## Radar small multiples Graph of KOOS Self-reported metrics\n\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# aggregate together the evaluative metrics as well as the visit sessions\nkoos_metrics = ['koos_pain', 'koos_sx', 'koos_adl', 'koos_sport', 'koos_qol']\nvisits = ['5 to 7 months', '8 to 12 months']  # only the two ranges we care about\n\n# calculating the visit-wise averages of each metric\nkoos_avg = df.groupby('tss_dashboard')[koos_metrics].mean().loc[visits]\n\n# calculating patient 101 and average duplicates\npatient_df = (\n    df[df['record_id'] == 101]\n      .groupby('tss_dashboard')[koos_metrics]\n      .mean()\n      .reindex(visits)\n)\n\n# ensuring that each small-multiple panels share the same scale\nmin_value = min(koos_avg.min().min(), patient_df.min().min())\nmax_value = max(koos_avg.max().max(), patient_df.max().max())\nmargin_value = (max_value - min_value) * 0.1\n\n# angles for the five KOOS spokes\nN = len(koos_metrics)\nangles = np.linspace(0, 2*np.pi, N, endpoint=False).tolist()\nangles += angles[:1]\n\n# set up the side-by-side polar subplots\nfig, axes = plt.subplots(nrows=1, ncols=len(visits), subplot_kw=dict(polar=True), figsize=(12, 8))\nif len(visits) == 1:\n    axes = [axes]\n\navg_colors = ['#777777', '#777777']\npatient_colors = ['#FF6E00', '#FF6E00']\n\n# loop through each visit stage and dedicated axis\nfor idx in range(len(visits)):\n    stage = visits[idx]\n    ax = axes[idx]\n    ax.set_facecolor('white')\n    ax.set_ylim([min_value - margin_value, max_value + margin_value])\n\n    avg_vals = koos_avg.loc[stage].tolist()\n    avg_vals.append(avg_vals[0])\n    ax.plot(angles, avg_vals, label='Cohort average', color=avg_colors[idx], linewidth=2)\n    ax.fill(angles, avg_vals, color=avg_colors[idx], alpha=0.08)\n\n    if not patient_df.loc[stage].isna().all():\n        pat_vals = patient_df.loc[stage].tolist()\n        pat_vals.append(pat_vals[0])\n        ax.plot(angles, pat_vals, label='Patient 101', color=patient_colors[idx], linewidth=2.5)\n        ax.fill(angles, pat_vals, color=patient_colors[idx], alpha=0.25)\n\n    labels = ['Pain Intensity', 'Symptoms', 'Activities of\\nDaily Living', 'Intense\\nAthletic\\nMovements', 'Quality of Life (By Knee)']\n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels(['']*N)\n    radial_push = [3, 4, 6, 6, 5]\n    for ang, txt, extra in zip(angles[:-1], labels, radial_push):\n        r = max_value + margin_value + extra\n        ha = 'left' if (0 <= ang <= np.pi/2 or 3*np.pi/2 <= ang <= 2*np.pi) else 'right'\n        ax.text(ang, r, txt, ha=ha, va='center', fontsize=10, color='#333333')\n\n    ax.tick_params(colors='#666666')\n    ax.yaxis.grid(True, color='#DDDDDD', linewidth=0.8)\n    ax.xaxis.grid(False)\n    ticks = np.linspace(min_value, max_value, 6)\n    ax.set_yticks(ticks)\n    ax.set_yticklabels([f\"{x:.0f}\" for x in ticks], fontsize=8)\n    ax.set_title(stage, y=1.08, fontweight='bold', fontsize=13)\n\n# drawing the arrows\nmetric_name = 'koos_qol'\nmetric_idx = koos_metrics.index(metric_name)\nmetric_ang = angles[metric_idx]\n\nsymptoms_name = 'koos_sx'\nsymptoms_idx = koos_metrics.index(symptoms_name)\nsymptoms_ang = angles[symptoms_idx]\n\nif not patient_df.loc['5 to 7 months'].isna().all():\n    val_57 = patient_df.loc['5 to 7 months', metric_name]\n    axes[0].annotate(\"Patient Quality of life\\nfalls short to cohort averages\", xy=(metric_ang, val_57), xytext=(metric_ang - 0.6, val_57 + 25), arrowprops=dict(arrowstyle='->', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n\nif not patient_df.loc['8 to 12 months'].isna().all():\n    val_812 = patient_df.loc['8 to 12 months', metric_name]\n    axes[1].annotate(\"Patient Quality of life significantly\\noutperforms cohort averages\", xy=(metric_ang, val_812), xytext=(metric_ang + 0.4, val_812 + 35), arrowprops=dict(arrowstyle='->', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n\n\nif not patient_df.loc['5 to 7 months'].isna().all():\n    val_812 = patient_df.loc['5 to 7 months', symptoms_name]\n    axes[0].annotate(\"Patient symptoms recovered\\nbetter than cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang -0.45, val_812 + 15), arrowprops=dict(arrowstyle='->', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n\nif not patient_df.loc['8 to 12 months'].isna().all():\n    val_812 = patient_df.loc['8 to 12 months', symptoms_name]\n    axes[1].annotate(\"Patient symptom recovery\\nfalls short to cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang - 0.4, val_812 + 30), arrowprops=dict(arrowstyle='->', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n\n# legend customization\nhandles, labels = axes[-1].get_legend_handles_labels()\nfig.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.46, 0.75), ncol=1, frameon=False, fontsize=9)\n\nplt.figtext(0.01, 0.1, 'Note: KOOS scores range from 0 (extreme) to 100 (perfectly healthy). Data compares one patient to cohort wide averages in the two month ranges.', fontsize=10, ha='left')\nplt.figtext(0.01, 0.05,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\n\nplt.tight_layout()\nplt.subplots_adjust(top=0.83)\n\n\nfig.text(0.185, 0.84, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\nfig.text(0.186, 0.84, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\nfig.text(0.31, 0.84, 'recovery status from the self-reported KOOS Metric', ha='left', va='center', fontsize=16, fontweight='bold')\nfig.text(0.5, 0.8, 'A comprehensive outlook at how Patient 101 feels in terms of their post-surgical recovery at each of the monthly visits', ha='center', va='center', fontsize=12)\n\n\nplt.savefig('Radar_small_multiples.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![Radar small multiples](Radar_small_multiples.png)\n\n## Grouped Box Plots of Recovery Metrics\n```python\n# using the raw dataset rather than the cleaned imputed dataset as the imputed dataset destroys the inter-quartile range\ndf = pd.read_csv('aclr data(in).csv')\n\n# splitting the data set into patient and cohort for comparison\npatient_id = 101\ndf_patient = df[df['record_id'] == patient_id]\ndf_cohort  = df[df['record_id'] != patient_id]\n\n# calculating patient records by time since surgery\ndf_patient_5_7  = df_patient[df_patient['tss_dashboard'] == '5 to 7 months']\ndf_patient_8_12 = df_patient[df_patient['tss_dashboard'] == '8 to 12 months']\n\nstrength_tests    = [\n    'acl_flex_isok_60', 'acl_ext_isok_60',\n    'lsi_flex_isok_60', 'lsi_ext_isok_60'\n]\npr_outcomes       = ['ikdc', 'acl_rsi']\nfunctional_scores = ['ch_lsi', 'th_lsi', 'sh_lsi']\n\nlabels = {\n    'acl_flex_isok_60': 'Isokinetic Knee Flexion (60°/s)',\n    'acl_ext_isok_60': 'Isokinetic Knee Extension (60°/s)',\n    'lsi_flex_isok_60':'Limb Symmetry Index:\\nIsokinetic Flexion',\n    'lsi_ext_isok_60': 'Limb Symmetry Index:\\nIsokinetic Extension',\n    'ikdc': 'IKDC Score',\n    'acl_rsi': 'ACL–Return to Sport Index',\n    'ch_lsi': 'Cross-Over Hop LSI',\n    'th_lsi': 'Triple Hop LSI',\n    'sh_lsi': 'Single Hop LSI'\n}\n\nbox_color = 'lightgrey'  \npatient_color = '#FF6E00'   \n\nplt.figure(figsize=(18, 10))\nplt.subplots_adjust(top=0.85, left=0, right=0.78, bottom=0.08, wspace=0.6)\n\n\naxes = [plt.subplot(1, 3, i) for i in range(1, 4)]\ngroups = [strength_tests, pr_outcomes, functional_scores]\ntitles = [\"Strength Tests\", \"Patient-Reported Outcomes\", \"Functional Assessment Scores\"]\n\nfor ax, metrics, title in zip(axes, groups, titles):\n    cohort_data   = []\n    valid_metrics = []\n\n    # calculating cohort values\n    for m in metrics:\n        vals = df_cohort[m].dropna().values\n        if len(vals) >= 2:\n            cohort_data.append(vals)\n            valid_metrics.append(m)\n    bp = ax.boxplot(\n        cohort_data,\n        positions = np.arange(len(valid_metrics)),\n        vert = False,\n        widths = 0.6,\n        patch_artist = True,\n        showfliers = False,\n        showmeans = False,\n        boxprops = dict(facecolor=box_color, edgecolor='black', linewidth=1.5),\n        whiskerprops = dict(color='black'),\n        capprops = dict(color='black'),\n        medianprops = dict(color='black', linewidth=2)\n    )\n\n    # creating legend labels \n    if valid_metrics:\n        bp['boxes'][0].set_label('Cohort IQR')\n        bp['medians'][0].set_label('Cohort Median')\n\n    # calculating the positioning for the patient's medians for each TSS range\n    for i, m in enumerate(valid_metrics):\n        pm1 = df_patient_5_7[m].median()\n        pm2 = df_patient_8_12[m].median()\n        if not np.isnan(pm1):\n            sc1 = ax.scatter(pm1, i, marker='D', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n            if i == 0:\n                sc1.set_label('Patient metric 5–7 months')\n        if not np.isnan(pm2):\n            sc2 = ax.scatter(pm2, i, marker='s', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n            if i == 0:\n                sc2.set_label('Patient metric 8–12 months')\n\n    # axis styling and autoscaling the x-axis\n    ax.set_yticks(np.arange(len(valid_metrics)))\n    ax.set_yticklabels([labels[m] for m in valid_metrics], fontsize=10)\n    ax.tick_params(axis='y', pad=12)\n    ax.set_title(title, fontsize=12, fontweight='bold', loc='left')\n\n    ax.margins(x=0.02)\n    ax.set_xlim(left=0)\n    ax.autoscale(enable=True, axis='x')\n\n    # labeling out the percentage ticks\n    ax.set_xticks([0, 25, 50, 75, 100, 125, 150])\n    ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%', '125%', '150%'], alpha=0.5)\n\n    ax.grid(axis='x', linestyle='-', color='white', alpha=1)\n    for spine in ['top', 'right', 'bottom']:\n        ax.spines[spine].set_visible(False)\n        \naxes[-1].legend(loc='lower right', bbox_to_anchor=(1.6, 0.45), frameon=False, fontsize=10)\n\nplt.figtext(0.07, 0.93, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\nplt.figtext(0.072, 0.93, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\nplt.figtext(0.155, 0.93, 'recovery status from miscellaneous medical testings', ha='left', va='center', fontsize=16, fontweight='bold')\nplt.figtext(-0.007, 0.9, 'Gray boxes = IQR (25–75%), black line = median, orange ◆ = patient recovery for 5-7 months, ■ = patient recovery for 8-12 months', ha='left', va='center',fontsize=12)\n\nplt.figtext(0, 0.03, 'Note: Recovery Metrics are represented in percentages. Data compares cohort median with different stages of recovery from the patient', fontsize=10, ha='left')\nplt.figtext(0, -0.01,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n\nplt.savefig('stacked_horizontal_boxplots.png', dpi=300, bbox_inches='tight', facecolor='white')\nplt.show()\n```\n\n![Box plots](stacked_horizontal_boxplots.png)\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"dataviz.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","theme":{"light":"minty"},"code-fode":false,"backgroundcolor":"#FFFFFF","title":"Data Visualization"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}