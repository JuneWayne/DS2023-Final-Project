{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Data Visualization\"\n",
        "format: html\n",
        "execute: \n",
        "  echo: true\n",
        "  eval: false\n",
        "---\n",
        "\n",
        "# **Data Visualization**\n",
        "\n",
        "This section documents the code used to generate the three visualizations in the final report: \n",
        "\n",
        "## 1. KOOS Pain Recovery Trajectory"
      ],
      "id": "ca34f057"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Importing Necessary Packages\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random # this is used to select random patients to sample/project on our visualization since we are limiting the number of paitents (lines), being shown on the page.\n",
        "\n",
        "#SETTING THE SEED- for reproducibility\n",
        "random.seed(42)\n",
        "\n",
        "# Let's Remove \"Preoperative\" stage ( only has a few lines so it's not worth out puting)\n",
        "df_filtered = df[df['tss_dashboard'] != 'Preoperative']\n",
        "\n",
        "# Map timepoints (we do this because the default was unordered and didn't have a logical flow)\n",
        "tss_mapping = {\n",
        "    \"3 to 4 months\": 0,\n",
        "    \"5 to 7 months\": 1,\n",
        "    \"8 to 12 months\": 2,\n",
        "    \"13 to 24 months\": 3,\n",
        "}\n",
        "\n",
        "df_filtered['time_ordered'] = df_filtered['tss_dashboard'].map(tss_mapping)\n",
        "# Setting the x-axis labels in correct order\n",
        "labels = [t for t, a in sorted(tss_mapping.items(), key=lambda x: x[1])]\n",
        "\n",
        "# Keeping patients with at least 3 timepoints, includeing  patient 101 ( which is our selected patient of focus)\n",
        "#Consulted with CHATGTP for a little help refining and structreing this part\n",
        "\n",
        "# What this does is it looks through the record_id and selects the rows that have the same record_id show up atleast 3 times\n",
        "v = df_filtered['record_id'].value_counts()[lambda x: x >= 3].index\n",
        "v = v.union([101]) #  Used documentation on how to structure this and use the union function\n",
        "df_3 = df_filtered[df_filtered['record_id'].isin(v)]\n",
        "\n",
        "# Let's choose  up to 200 others  patients ( we are doing this so we can compare patient 101 and see relative paths it could take)\n",
        "other_ids = [i for i in df_3['record_id'].unique() if i != 101] # this filters record_ids ( that show up at 3 different timepoints) excluding patient 101 ( record_id)\n",
        "sampled_ids = random.sample(other_ids, min(200, len(other_ids))) # this samples 200 random record_ids pateints\n",
        "sampled_ids.append(101)#(this adds the record_id 101 ( our target pateint))\n",
        "\n",
        "# this is full dataframe where it includes both the 200 sampled record_ids and our target paitent 101\n",
        "df_sampled = df_3[df_3['record_id'].isin(sampled_ids)]\n",
        "\n",
        "\n",
        "\n",
        "# MAKING THE GRAPH (PLOTTING)\n",
        "plt.figure(figsize=(14, 7))\n",
        "\n",
        "\n",
        "#Plotting other patient lines (for comparison)- conditional for making all other sample record_ids grey\n",
        "for p, group in df_sampled.groupby('record_id'):\n",
        "    if p != 101:\n",
        "        plt.plot(group['time_ordered'], group['koos_pain'], color='gray', alpha=0.2, linewidth=1)\n",
        "\n",
        "#Mean trajectory of other patients ( this may be useful to see how our paitent 101 is doing comparing to others ( in that sample))\n",
        "mean_traj = df_sampled[df_sampled['record_id'] != 101].groupby('time_ordered')['koos_pain'].mean()\n",
        "plt.plot(mean_traj.index, mean_traj.values, color='blue', linestyle='--', linewidth=2, label='Mean Trajectory') # blue is a good choice\n",
        "\n",
        "# Recovery phases- for visual aiding\n",
        "plt.axvspan(0, 1, color='gold', alpha=0.1, label='Early Recovery Stage')\n",
        "plt.axvspan(1, 2, color='orange', alpha=0.1, label='Mid Recovery Stage')\n",
        "plt.axvspan(2, 3, color='green', alpha=0.1, label='Late Recovery Stage')\n",
        "\n",
        "# Let's Highlight Patient 101\n",
        "ben = df_sampled[df_sampled['record_id'] == 101].sort_values('time_ordered') #this makes a new column that has information on our benchmark patient\n",
        "plt.plot(ben['time_ordered'], ben['koos_pain'], color='orange', linewidth=2.5) # red to show importance\n",
        "# Annotate each point on Patient 101's line with the KOOS Pain score value\n",
        "for x, y in zip(ben['time_ordered'], ben['koos_pain']):\n",
        "    plt.text(x, y + 1, f'{y:.1f}', color='orange', fontsize=9, ha='left')\n",
        "\n",
        "\n",
        "# styling\n",
        "plt.xticks(ticks=range(len(labels)), labels=labels)\n",
        "plt.xlabel('Time Since Surgery',fontsize=12)\n",
        "plt.ylabel('KOOS Pain Score', fontsize=12)\n",
        "plt.text(-0.2, 105, 'Post-ACLR KOOS Pain Scores: Where Does',fontsize=20, fontweight='bold', ha='left')\n",
        "plt.text(1.613, 105, 'Patient 101', fontsize=20, fontweight='bold', ha='left', color='#FF6E00')\n",
        "plt.text(2.12, 105, 'Fit in the Recovery Spectrum?', fontsize=20, fontweight='bold', ha='left')\n",
        "plt.grid(False)\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "plt.gca().spines['left'].set_position(('outward', -30))\n",
        "plt.tick_params(axis='x', which='both', length=0, pad= 15)\n",
        "plt.figtext(0.01, -0.05, 'Note: KOOS Pain scores range from 0 (extreme pain) to 100 (no pain). Data includes randomly sampled patients with at least 3 observations.', fontsize=10, ha='left')\n",
        "plt.figtext(0.01, -0.08, \"Note: Multiple observations may exist within a time bin\")\n",
        "plt.figtext(0.01, -0.16,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n",
        "\n",
        "plt.legend(loc='lower right', bbox_to_anchor=(0.9, 0.1), facecolor=\"white\")\n",
        "plt.tight_layout()\n",
        "plt.savefig('KOOS_Pain_Recovery_Trajectory.png', dpi=300, bbox_inches='tight', facecolor='white')\n",
        "plt.show()"
      ],
      "id": "3944d362",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Spaghetti Graph - KOOS Pain Trajectory](KOOS_Pain_Recovery_Trajectory_new.png)\n",
        "\n",
        "## 2. Radar small multiples Graph of KOOS Self-reported metrics"
      ],
      "id": "f2c29909"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# aggregate together the evaluative metrics as well as the visit sessions\n",
        "koos_metrics = ['koos_pain', 'koos_sx', 'koos_adl', 'koos_sport', 'koos_qol']\n",
        "visits = ['5 to 7 months', '8 to 12 months']  # only the two ranges we care about\n",
        "\n",
        "# calculating the visit-wise averages of each metric\n",
        "koos_avg = df.groupby('tss_dashboard')[koos_metrics].mean().loc[visits]\n",
        "\n",
        "# calculating patient 101 and average duplicates\n",
        "patient_df = (\n",
        "    df[df['record_id'] == 101]\n",
        "      .groupby('tss_dashboard')[koos_metrics]\n",
        "      .mean()\n",
        "      .reindex(visits)\n",
        ")\n",
        "\n",
        "# ensuring that each small-multiple panels share the same scale\n",
        "min_value = min(koos_avg.min().min(), patient_df.min().min())\n",
        "max_value = max(koos_avg.max().max(), patient_df.max().max())\n",
        "margin_value = (max_value - min_value) * 0.1\n",
        "\n",
        "# angles for the five KOOS spokes\n",
        "N = len(koos_metrics)\n",
        "angles = np.linspace(0, 2*np.pi, N, endpoint=False).tolist()\n",
        "angles += angles[:1]\n",
        "\n",
        "# set up the side-by-side polar subplots\n",
        "fig, axes = plt.subplots(nrows=1, ncols=len(visits), subplot_kw=dict(polar=True), figsize=(12, 8))\n",
        "if len(visits) == 1:\n",
        "    axes = [axes]\n",
        "\n",
        "avg_colors = ['#777777', '#777777']\n",
        "patient_colors = ['#FF6E00', '#FF6E00']\n",
        "\n",
        "# loop through each visit stage and dedicated axis\n",
        "for idx in range(len(visits)):\n",
        "    stage = visits[idx]\n",
        "    ax = axes[idx]\n",
        "    ax.set_facecolor('white')\n",
        "    ax.set_ylim([min_value - margin_value, max_value + margin_value])\n",
        "\n",
        "    avg_vals = koos_avg.loc[stage].tolist()\n",
        "    avg_vals.append(avg_vals[0])\n",
        "    ax.plot(angles, avg_vals, label='Cohort average', color=avg_colors[idx], linewidth=2)\n",
        "    ax.fill(angles, avg_vals, color=avg_colors[idx], alpha=0.08)\n",
        "\n",
        "    if not patient_df.loc[stage].isna().all():\n",
        "        pat_vals = patient_df.loc[stage].tolist()\n",
        "        pat_vals.append(pat_vals[0])\n",
        "        ax.plot(angles, pat_vals, label='Patient 101', color=patient_colors[idx], linewidth=2.5)\n",
        "        ax.fill(angles, pat_vals, color=patient_colors[idx], alpha=0.25)\n",
        "\n",
        "    labels = ['Pain Intensity', 'Symptoms', 'Activities of\\nDaily Living', 'Intense\\nAthletic\\nMovements', 'Quality of Life (By Knee)']\n",
        "    ax.set_xticks(angles[:-1])\n",
        "    ax.set_xticklabels(['']*N)\n",
        "    radial_push = [3, 4, 6, 6, 5]\n",
        "    for ang, txt, extra in zip(angles[:-1], labels, radial_push):\n",
        "        r = max_value + margin_value + extra\n",
        "        ha = 'left' if (0 <= ang <= np.pi/2 or 3*np.pi/2 <= ang <= 2*np.pi) else 'right'\n",
        "        ax.text(ang, r, txt, ha=ha, va='center', fontsize=10, color='#333333')\n",
        "\n",
        "    ax.tick_params(colors='#666666')\n",
        "    ax.yaxis.grid(True, color='#DDDDDD', linewidth=0.8)\n",
        "    ax.xaxis.grid(False)\n",
        "    ticks = np.linspace(min_value, max_value, 6)\n",
        "    ax.set_yticks(ticks)\n",
        "    ax.set_yticklabels([f\"{x:.0f}\" for x in ticks], fontsize=8)\n",
        "    ax.set_title(stage, y=1.08, fontweight='bold', fontsize=13)\n",
        "\n",
        "# drawing the arrows\n",
        "metric_name = 'koos_qol'\n",
        "metric_idx = koos_metrics.index(metric_name)\n",
        "metric_ang = angles[metric_idx]\n",
        "\n",
        "symptoms_name = 'koos_sx'\n",
        "symptoms_idx = koos_metrics.index(symptoms_name)\n",
        "symptoms_ang = angles[symptoms_idx]\n",
        "\n",
        "if not patient_df.loc['5 to 7 months'].isna().all():\n",
        "    val_57 = patient_df.loc['5 to 7 months', metric_name]\n",
        "    axes[0].annotate(\"Patient Quality of life\\nfalls short to cohort averages\", xy=(metric_ang, val_57), xytext=(metric_ang - 0.6, val_57 + 25), arrowprops=dict(arrowstyle='->', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n",
        "\n",
        "if not patient_df.loc['8 to 12 months'].isna().all():\n",
        "    val_812 = patient_df.loc['8 to 12 months', metric_name]\n",
        "    axes[1].annotate(\"Patient Quality of life significantly\\noutperforms cohort averages\", xy=(metric_ang, val_812), xytext=(metric_ang + 0.4, val_812 + 35), arrowprops=dict(arrowstyle='->', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n",
        "\n",
        "\n",
        "if not patient_df.loc['5 to 7 months'].isna().all():\n",
        "    val_812 = patient_df.loc['5 to 7 months', symptoms_name]\n",
        "    axes[0].annotate(\"Patient symptoms recovered\\nbetter than cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang -0.45, val_812 + 15), arrowprops=dict(arrowstyle='->', color='blue', lw=1.5), fontsize=9, color='blue', fontweight='bold')\n",
        "\n",
        "if not patient_df.loc['8 to 12 months'].isna().all():\n",
        "    val_812 = patient_df.loc['8 to 12 months', symptoms_name]\n",
        "    axes[1].annotate(\"Patient symptom recovery\\nfalls short to cohort averages\", xy=(symptoms_ang, val_812), xytext=(symptoms_ang - 0.4, val_812 + 30), arrowprops=dict(arrowstyle='->', color='red', lw=1.5), fontsize=9, color='red', fontweight='bold')\n",
        "\n",
        "# legend customization\n",
        "handles, labels = axes[-1].get_legend_handles_labels()\n",
        "fig.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.46, 0.75), ncol=1, frameon=False, fontsize=9)\n",
        "\n",
        "plt.figtext(0.01, 0.1, 'Note: KOOS scores range from 0 (extreme) to 100 (perfectly healthy). Data compares one patient to cohort wide averages in the two month ranges.', fontsize=10, ha='left')\n",
        "plt.figtext(0.01, 0.05,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n",
        "\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.subplots_adjust(top=0.83)\n",
        "\n",
        "\n",
        "fig.text(0.185, 0.84, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\n",
        "fig.text(0.186, 0.84, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\n",
        "fig.text(0.31, 0.84, 'recovery status from the self-reported KOOS Metric', ha='left', va='center', fontsize=16, fontweight='bold')\n",
        "fig.text(0.5, 0.8, 'A comprehensive outlook at how Patient 101 feels in terms of their post-surgical recovery at each of the monthly visits', ha='center', va='center', fontsize=12)\n",
        "\n",
        "\n",
        "plt.savefig('Radar_small_multiples.png', dpi=300, bbox_inches='tight', facecolor='white')\n",
        "plt.show()"
      ],
      "id": "61240e95",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Radar small multiples](Radar_small_multiples.png)\n",
        "\n",
        "## 3. Grouped Box Plots of Recovery Metrics"
      ],
      "id": "5fc0b114"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# using the raw dataset rather than the cleaned imputed dataset as the imputed dataset destroys the inter-quartile range\n",
        "df = pd.read_csv('aclr data(in).csv')\n",
        "\n",
        "# splitting the data set into patient and cohort for comparison\n",
        "patient_id = 101\n",
        "df_patient = df[df['record_id'] == patient_id]\n",
        "df_cohort  = df[df['record_id'] != patient_id]\n",
        "\n",
        "# calculating patient records by time since surgery\n",
        "df_patient_5_7  = df_patient[df_patient['tss_dashboard'] == '5 to 7 months']\n",
        "df_patient_8_12 = df_patient[df_patient['tss_dashboard'] == '8 to 12 months']\n",
        "\n",
        "strength_tests    = [\n",
        "    'acl_flex_isok_60', 'acl_ext_isok_60',\n",
        "    'lsi_flex_isok_60', 'lsi_ext_isok_60'\n",
        "]\n",
        "pr_outcomes       = ['ikdc', 'acl_rsi']\n",
        "functional_scores = ['ch_lsi', 'th_lsi', 'sh_lsi']\n",
        "\n",
        "labels = {\n",
        "    'acl_flex_isok_60': 'Isokinetic Knee Flexion (60°/s)',\n",
        "    'acl_ext_isok_60': 'Isokinetic Knee Extension (60°/s)',\n",
        "    'lsi_flex_isok_60':'Limb Symmetry Index:\\nIsokinetic Flexion',\n",
        "    'lsi_ext_isok_60': 'Limb Symmetry Index:\\nIsokinetic Extension',\n",
        "    'ikdc': 'IKDC Score',\n",
        "    'acl_rsi': 'ACL–Return to Sport Index',\n",
        "    'ch_lsi': 'Cross-Over Hop LSI',\n",
        "    'th_lsi': 'Triple Hop LSI',\n",
        "    'sh_lsi': 'Single Hop LSI'\n",
        "}\n",
        "\n",
        "box_color = 'lightgrey'  \n",
        "patient_color = '#FF6E00'   \n",
        "\n",
        "plt.figure(figsize=(18, 10))\n",
        "plt.subplots_adjust(top=0.85, left=0, right=0.78, bottom=0.08, wspace=0.6)\n",
        "\n",
        "\n",
        "axes = [plt.subplot(1, 3, i) for i in range(1, 4)]\n",
        "groups = [strength_tests, pr_outcomes, functional_scores]\n",
        "titles = [\"Strength Tests\", \"Patient-Reported Outcomes\", \"Functional Assessment Scores\"]\n",
        "\n",
        "for ax, metrics, title in zip(axes, groups, titles):\n",
        "    cohort_data   = []\n",
        "    valid_metrics = []\n",
        "\n",
        "    # calculating cohort values\n",
        "    for m in metrics:\n",
        "        vals = df_cohort[m].dropna().values\n",
        "        if len(vals) >= 2:\n",
        "            cohort_data.append(vals)\n",
        "            valid_metrics.append(m)\n",
        "    bp = ax.boxplot(\n",
        "        cohort_data,\n",
        "        positions = np.arange(len(valid_metrics)),\n",
        "        vert = False,\n",
        "        widths = 0.6,\n",
        "        patch_artist = True,\n",
        "        showfliers = False,\n",
        "        showmeans = False,\n",
        "        boxprops = dict(facecolor=box_color, edgecolor='black', linewidth=1.5),\n",
        "        whiskerprops = dict(color='black'),\n",
        "        capprops = dict(color='black'),\n",
        "        medianprops = dict(color='black', linewidth=2)\n",
        "    )\n",
        "\n",
        "    # creating legend labels \n",
        "    if valid_metrics:\n",
        "        bp['boxes'][0].set_label('Cohort IQR')\n",
        "        bp['medians'][0].set_label('Cohort Median')\n",
        "\n",
        "    # calculating the positioning for the patient's medians for each TSS range\n",
        "    for i, m in enumerate(valid_metrics):\n",
        "        pm1 = df_patient_5_7[m].median()\n",
        "        pm2 = df_patient_8_12[m].median()\n",
        "        if not np.isnan(pm1):\n",
        "            sc1 = ax.scatter(pm1, i, marker='D', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n",
        "            if i == 0:\n",
        "                sc1.set_label('Patient metric 5–7 months')\n",
        "        if not np.isnan(pm2):\n",
        "            sc2 = ax.scatter(pm2, i, marker='s', s=80, facecolor=patient_color, edgecolor='black', zorder=3)\n",
        "            if i == 0:\n",
        "                sc2.set_label('Patient metric 8–12 months')\n",
        "\n",
        "    # axis styling and autoscaling the x-axis\n",
        "    ax.set_yticks(np.arange(len(valid_metrics)))\n",
        "    ax.set_yticklabels([labels[m] for m in valid_metrics], fontsize=10)\n",
        "    ax.tick_params(axis='y', pad=12)\n",
        "    ax.set_title(title, fontsize=12, fontweight='bold', loc='left')\n",
        "\n",
        "    ax.margins(x=0.02)\n",
        "    ax.set_xlim(left=0)\n",
        "    ax.autoscale(enable=True, axis='x')\n",
        "\n",
        "    # labeling out the percentage ticks\n",
        "    ax.set_xticks([0, 25, 50, 75, 100, 125, 150])\n",
        "    ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%', '125%', '150%'], alpha=0.5)\n",
        "\n",
        "    ax.grid(axis='x', linestyle='-', color='white', alpha=1)\n",
        "    for spine in ['top', 'right', 'bottom']:\n",
        "        ax.spines[spine].set_visible(False)\n",
        "        \n",
        "axes[-1].legend(loc='lower right', bbox_to_anchor=(1.6, 0.45), frameon=False, fontsize=10)\n",
        "\n",
        "plt.figtext(0.07, 0.93, 'Post ACLR ', ha='right', va='center', fontsize=16, fontweight='bold')\n",
        "plt.figtext(0.072, 0.93, 'Patient 101',  ha='left', va='center', fontsize=16, fontweight='bold', color='#FF6E00')\n",
        "plt.figtext(0.155, 0.93, 'recovery status from miscellaneous medical testings', ha='left', va='center', fontsize=16, fontweight='bold')\n",
        "plt.figtext(-0.007, 0.9, 'Gray boxes = IQR (25–75%), black line = median, orange ◆ = patient recovery for 5-7 months, ■ = patient recovery for 8-12 months', ha='left', va='center',fontsize=12)\n",
        "\n",
        "plt.figtext(0, 0.03, 'Note: Recovery Metrics are represented in percentages. Data compares cohort median with different stages of recovery from the patient', fontsize=10, ha='left')\n",
        "plt.figtext(0, -0.01,\"Data Source: Evaluation of Thigh Muscle Strength in Adolescent Patients After Anterior Cruciate Ligament Reconstruction\\nWith Lateral Tenodesis or Anterolateral Ligament Reconstruction \",fontsize=10, ha='left', color='#999999')\n",
        "\n",
        "plt.savefig('stacked_horizontal_boxplots.png', dpi=300, bbox_inches='tight', facecolor='white')\n",
        "plt.show()"
      ],
      "id": "786184de",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Box plots](stacked_horizontal_boxplots.png)\n"
      ],
      "id": "7bb8b641"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}